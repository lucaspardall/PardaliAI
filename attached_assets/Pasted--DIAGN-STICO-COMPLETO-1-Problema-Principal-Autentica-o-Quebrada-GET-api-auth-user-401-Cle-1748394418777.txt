üîç DIAGN√ìSTICO COMPLETO
1. Problema Principal: Autentica√ß√£o Quebrada
‚ùå GET /api/auth/user 401 - "Clerk user data not available"
‚úÖ Auth OK: GET / - User: user_2xh...
Diagn√≥stico: O usu√°rio est√° autenticado no Clerk mas a API n√£o consegue recuperar os dados.
2. Deprecation Cr√≠tica
‚ö†Ô∏è "req.auth" is deprecated - Use `req.auth()` as a function
3. Fluxo Inconsistente

Usu√°rio autenticado no middleware
Mas n√£o autenticado na rota /authorize
Stores retornando array vazio

üõ†Ô∏è PLANO DE A√á√ÉO IMEDIATO
1Ô∏è‚É£ PRIMEIRO: Verificar estrutura atual
bash# Preciso ver estes arquivos:
- server/middleware/auth.js
- server/routes/auth.js
- server/routes/stores.js
- server/config/clerk.js
2Ô∏è‚É£ CORRE√á√ÉO 1: Middleware de Autentica√ß√£o
javascript// server/middleware/auth.js
// ANTES (deprecated):
const { userId } = req.auth;

// DEPOIS (correto):
const { userId } = req.auth();
3Ô∏è‚É£ CORRE√á√ÉO 2: Rota /api/auth/user
javascript// server/routes/auth.js
router.get('/user', requireAuth, async (req, res) => {
  try {
    // VERIFICAR: req.auth() ao inv√©s de req.auth
    const auth = req.auth();
    
    if (!auth?.userId) {
      return res.status(401).json({ 
        error: 'No authenticated user',
        debug: { auth } 
      });
    }

    // Buscar dados completos do Clerk
    const user = await clerkClient.users.getUser(auth.userId);
    
    res.json({
      id: user.id,
      email: user.emailAddresses[0]?.emailAddress,
      name: user.firstName,
      // ... outros campos
    });
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(401).json({ 
      error: 'Clerk user data not available',
      details: error.message 
    });
  }
});
4Ô∏è‚É£ CORRE√á√ÉO 3: Consist√™ncia no Middleware
javascript// server/middleware/auth.js
const requireAuth = (req, res, next) => {
  const auth = req.auth(); // FUN√á√ÉO, n√£o propriedade
  
  if (!auth?.userId) {
    console.log('‚ùå Usu√°rio n√£o autenticado tentando acessar:', req.path);
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  console.log('‚úÖ Auth OK:', req.path, '- User:', auth.userId.substring(0, 10) + '...');
  req.userId = auth.userId; // Padronizar acesso
  next();
};
5Ô∏è‚É£ VERIFICA√á√ÉO: Por que stores est√° vazio?
javascript// server/routes/stores.js
router.get('/', requireAuth, async (req, res) => {
  try {
    const userId = req.userId; // Usar o padr√£o definido no middleware
    
    console.log('Buscando lojas para usu√°rio:', userId);
    
    const stores = await Store.findAll({
      where: { userId },
      include: ['shopeeCredentials']
    });
    
    console.log(`Encontradas ${stores.length} lojas`);
    res.json(stores);
  } catch (error) {
    console.error('Erro ao buscar lojas:', error);
    res.status(500).json({ error: 'Failed to fetch stores' });
  }
});
üö® A√á√ïES URGENTES

Atualizar TODOS os req.auth para req.auth()
Verificar se clerkClient est√° configurado corretamente
Adicionar logs detalhados para debug
Verificar se o banco tem dados para este usu√°rio