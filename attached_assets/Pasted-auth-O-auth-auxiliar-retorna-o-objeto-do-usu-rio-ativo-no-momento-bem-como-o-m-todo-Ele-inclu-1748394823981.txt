auth()
O auth()auxiliar retorna o objeto  do usuário ativo no momento, bem como o método. Ele inclui um único método, , que você pode usar para verificar se um usuário está autenticado ou autorizado a acessar determinadas partes da sua aplicação ou até mesmo rotas inteiras.AuthredirectToSignIn()protect()

Disponível somente para App Router.
Funciona somente no lado do servidor, como em Componentes do Servidor, Manipuladores de Rota e Ações do Servidor.
Precisa clerkMiddleware()ser configurado.
auth.protect()
authinclui uma única propriedade, o protect()método, que você pode usar de duas maneiras:

para verificar se um usuário está autenticado (conectado)
para verificar se um usuário está autorizado (tem as funções ou permissões corretas) para acessar algo, como um componente ou um manipulador de rotas
A tabela a seguir descreve como auth.protect()se comporta com base no status de autenticação ou autorização do usuário:

Autenticado	Autorizado	auth.protect()vai
Sim	Sim	Retorna o objeto  .Auth
Sim	Não	Retorna um 404erro.
Não	Não	Redirecione o usuário para a página de login**.
Importante

**Para solicitações que não sejam de documentos, como solicitações de API, auth.protect()retorna um 404erro para usuários que não estão autenticados.

auth.protect()aceita os seguintes parâmetros:

role?
string
A função a ser verificada.

permission?
string
A permissão para verificar.

has?
(isAuthorizedParams: CheckAuthorizationParamsWithCustomPermissions) => boolean
Uma função que verifica se o usuário possui uma função organizacional ou permissão personalizada. Consulte a referência para obter mais informações.

unauthorizedUrl?
string
A URL para redirecionar o usuário caso ele não esteja autorizado.

unauthenticatedUrl?
string
A URL para redirecionar o usuário caso ele não esteja autenticado.

Exemplo
auth.protect()pode ser usado para verificar se um usuário está autenticado ou autorizado a acessar determinadas partes da sua aplicação ou até mesmo rotas inteiras. Veja exemplos detalhados no guia sobre como verificar se um usuário está autorizado .

Devoluções
O auth()auxiliar retorna o seguinte:

O objeto  .Auth
O redirectToSignIn()método.
redirectToSignIn()
O auth()auxiliar retorna o redirectToSignIn()método que você pode usar para redirecionar o usuário para a página de login.

redirectToSignIn()aceita os seguintes parâmetros:

returnBackUrl?
string | URL
A URL para redirecionar o usuário após ele efetuar login.

Observação

auth()no lado do servidor só é possível acessar URLs de redirecionamento definidas por meio de variáveis ​​de ambiente ou clerkMiddlewarechaves dinâmicas .

Exemplo
O exemplo a seguir mostra como redirectToSignIn()redirecionar o usuário para a página de login caso ele não esteja autenticado. Também é comum usar " redirectToSignIn()in" clerkMiddleware()para proteger rotas inteiras; consulte a clerkMiddleware()documentação para mais informações.

aplicativo /page.tsx

import { auth } from '@clerk/nextjs/server'

export default async function Page() {
  const { userId, redirectToSignIn } = await auth()

  if (!userId) return redirectToSignIn()

  return <h1>Hello, {userId}</h1>
}
auth()uso
Proteja páginas e rotas
Você pode usar auth()para verificar se userIdexiste. Se for nulo, não há um usuário autenticado (conectado). Veja exemplos detalhados no guia dedicado .

Verifique se um usuário está autorizado
Você pode usar auth()para verificar se um usuário está autorizado a acessar determinadas partes da sua aplicação ou até mesmo rotas inteiras, verificando o tipo de controle de acesso. Veja exemplos detalhados no guia sobre como verificar se um usuário está autorizado .

Busca de dados comgetToken()
Se você precisar enviar um JWT para um servidor, recupera o token de sessãogetToken() do usuário atual ou um modelo JWT personalizado . Veja exemplos detalhados na referência de objetos Auth