Entendido! Você quer uma solução detalhada com código para garantir que o redirecionamento para autorização da loja Shopee funcione corretamente, levando o vendedor para a página de login da loja dele, e não da Open Platform.

O problema central que identificamos nos seus logs é a ausência do parâmetro sign na URL de autorização. Vamos corrigir isso.

Fluxo de Autorização Correto (API V2.0 da Shopee)
Início (No seu SaaS): Seu cliente (o vendedor da Shopee) clica em um botão no seu sistema para "Conectar com Shopee" ou similar.
Geração da URL de Autorização (No seu Backend):
Seu backend gera dinamicamente a URL de autorização da Shopee.
Esta URL deve incluir: partner_id, redirect_uri, timestamp e, crucialmente, o sign (assinatura).
O api_path usado para gerar o sign deve ser /api/v2/shop/auth_partner.
Redirecionamento para Shopee (Do seu SaaS para o Navegador do Cliente):
Seu backend envia uma resposta de redirecionamento (HTTP 302) ao navegador do cliente, ou fornece a URL gerada para que o frontend a utilize para redirecionar o navegador.
O navegador do cliente é então direcionado para a URL de autorização da Shopee.
Login e Autorização na Shopee (Navegador do Cliente):
O vendedor é apresentado à página de login do Shopee Seller Centre (se a URL e o sign estiverem corretos).
Ele faz login com as credenciais da loja dele.
Ele revisa as permissões que seu SaaS está solicitando e autoriza.
Redirecionamento de Volta para o SaaS (Da Shopee para o Navegador do Cliente):
A Shopee redireciona o navegador do cliente de volta para a redirect_uri que você especificou.
Neste redirecionamento, a Shopee anexa um code (código de autorização) e o shop_id (ID da loja) como parâmetros na URL.
Troca do Código pelo Access Token (No seu Backend):
Seu backend recebe a chamada na redirect_uri com o code e shop_id.
Seu backend faz uma requisição POST segura (servidor-a-servidor) para a API da Shopee (/api/v2/auth/token/get) para trocar esse code por um access_token e um refresh_token.
Armazenamento Seguro dos Tokens (No seu Backend):
Você armazena os tokens de forma segura, associados à loja do vendedor.
Pré-requisitos (Informações que você deve ter)
SHOPEE_PARTNER_ID: Seu ID de parceiro (ex: 2011285).
SHOPEE_PARTNER_KEY: Sua chave de parceiro (Client Secret).
SHOPEE_REDIRECT_URI: A URL de callback no seu sistema, cadastrada no Shopee Open Platform (ex: https://cipshopee.replit.app/api/shopee/callback).
SHOPEE_HOST: O host da API da Shopee. Para a API V2, geralmente é https://partner.shopeemobile.com. Verifique a documentação para o host correto para o Brasil, se houver um específico para esta etapa, embora partner.shopeemobile.com seja frequentemente global para chamadas de API.
Código Python Detalhado para Gerar a URL de Autorização
Este código Python demonstra como gerar a URL de autorização correta, incluindo o sign.

Python

import time
import hmac
import hashlib
import urllib.parse

# --- Suas Credenciais e Configurações ---
SHOPEE_PARTNER_ID = 2011285  # Substitua pelo seu Partner ID (INT ou STRING, Shopee espera INT para partner_id nos JSONs, mas STRING na URL)
SHOPEE_PARTNER_KEY = "SUA_PARTNER_KEY_AQUI"  # Substitua pela sua Partner Key (Client Secret)
SHOPEE_REDIRECT_URI = "https://cipshopee.replit.app/api/shopee/callback" # Sua redirect_uri cadastrada

# Host da API da Shopee para autorização de parceiros
# (Verifique a documentação oficial para o Brasil se houver um host regional específico para esta URL)
SHOPEE_AUTHORIZATION_HOST = "https://partner.shopeemobile.com"
API_PATH_SHOP_AUTH = "/api/v2/shop/auth_partner"

def generate_shopee_authorization_url(state_value=None):
    """
    Gera a URL completa para redirecionar o vendedor para autorização da loja Shopee.
    """
    timestamp = int(time.time())
    
    # 1. Gerar a assinatura (sign)
    # String base: partner_id + api_path + timestamp
    base_string = f"{SHOPEE_PARTNER_ID}{API_PATH_SHOP_AUTH}{timestamp}"
    
    # Calcula o HMAC SHA256 usando a Partner Key
    sign = hmac.new(
        SHOPEE_PARTNER_KEY.encode('utf-8'),
        base_string.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    
    # 2. Montar os parâmetros da URL
    params = {
        "partner_id": str(SHOPEE_PARTNER_ID), # Shopee espera string na query param
        "redirect": SHOPEE_REDIRECT_URI,
        "timestamp": str(timestamp), # Shopee espera string na query param
        "sign": sign
    }
    
    # Adiciona o parâmetro 'state' se fornecido (recomendado para segurança CSRF)
    if state_value:
        params["state"] = state_value
        
    # Os parâmetros adicionais que você estava tentando usar (`auth_type`, `is_auth_shop`, `login_type`, `region`)
    # não são parte da especificação padrão da URL de autorização assinada.
    # Se você confirmar que são necessários e válidos como query params, adicione-os aqui.
    # Ex: params["region"] = "BR"
    # ATENÇÃO: A inclusão de parâmetros não padrão na URL assinada deve ser feita com cuidado
    # e de acordo com a documentação, pois podem invalidar a assinatura ou não serem reconhecidos.
    # Comece com o mínimo necessário para funcionar.

    # 3. Construir a URL final
    query_string = urllib.parse.urlencode(params)
    authorization_url = f"{SHOPEE_AUTHORIZATION_HOST}{API_PATH_SHOP_AUTH}?{query_string}"
    
    return authorization_url

# --- Exemplo de Uso ---
if __name__ == "__main__":
    # Você pode gerar um valor de 'state' único para cada requisição de autorização
    # e verificá-lo no callback para segurança.
    meu_valor_de_estado_unico = f"cipshopee_{int(time.time() * 1000)}" # Exemplo
    
    auth_url = generate_shopee_authorization_url(state_value=meu_valor_de_estado_unico)
    
    print("--- URL de Autorização Gerada ---")
    print(auth_url)
    print("\n--- Detalhes para Verificação ---")
    print(f"Partner ID: {SHOPEE_PARTNER_ID}")
    print(f"Timestamp usado: {auth_url.split('timestamp=')[1].split('&')[0]}") # Extrai o timestamp da URL
    print(f"Sign gerado: {auth_url.split('sign=')[1].split('&')[0]}") # Extrai o sign da URL
    print(f"Redirect URI: {SHOPEE_REDIRECT_URI}")
    if meu_valor_de_estado_unico:
        print(f"State: {meu_valor_de_estado_unico}")

    print("\nInstruções:")
    print("1. Copie a 'URL de Autorização Gerada' acima.")
    print("2. Cole em um navegador.")
    print("3. Você deverá ser redirecionado para a página de login do VENDEDOR da Shopee.")
    print("4. Após o login e autorização, a Shopee redirecionará para sua SHOPEE_REDIRECT_URI com os parâmetros 'code' e 'shop_id'.")

Como integrar isso no seu SaaS (exemplo com Flask - Python Web Framework):

Python

from flask import Flask, redirect, request, jsonify
# Suponha que a função generate_shopee_authorization_url esteja no mesmo arquivo ou importada

app = Flask(__name__)

@app.route('/connect-shopee')
def connect_shopee():
    # Gerar um 'state' para segurança CSRF
    # Armazene este 'state' na sessão do usuário para verificar no callback
    state = f"user_session_xyz_{int(time.time())}" # Exemplo, use um método robusto
    
    shopee_auth_url = generate_shopee_authorization_url(state_value=state)
    
    # Redireciona o navegador do usuário para a URL de autorização da Shopee
    return redirect(shopee_auth_url)

@app.route('/api/shopee/callback') # Deve corresponder à sua SHOPEE_REDIRECT_URI
def shopee_callback():
    auth_code = request.args.get('code')
    shop_id = request.args.get('shop_id')
    received_state = request.args.get('state')
    
    # TODO: Verifique se o 'received_state' corresponde ao 'state' armazenado na sessão do usuário
    # if not verify_my_state(received_state):
    #    return "Erro de CSRF: State inválido!", 400

    if not auth_code or not shop_id:
        return "Erro: Código de autorização ou Shop ID não recebido.", 400
        
    print(f"Callback recebido! Código: {auth_code}, Shop ID: {shop_id}")
    
    # --- Próximo Passo: Trocar o 'auth_code' por um Access Token ---
    # Aqui você fará uma requisição POST do seu servidor para a Shopee:
    # Endpoint: /api/v2/auth/token/get
    # Corpo da requisição (JSON):
    # {
    #   "code": auth_code,
    #   "partner_id": int(SHOPEE_PARTNER_ID), # Certifique-se que é um inteiro aqui
    #   "shop_id": int(shop_id) # Certifique-se que é um inteiro aqui
    # }
    # Esta requisição também precisa de `timestamp` e `sign` nos parâmetros da URL (ou como cabeçalhos, verifique a doc)
    # A string base para o sign de /api/v2/auth/token/get é: partner_id + /api/v2/auth/token/get + timestamp + request_body
    # (Consulte a documentação da Shopee para a assinatura exata desta chamada de API específica)

    # Exemplo simplificado (você precisará de uma função para fazer a chamada POST assinada):
    # access_token_response = get_access_token_from_shopee(auth_code, shop_id)
    # if access_token_response and "access_token" in access_token_response:
    #     # Armazene access_token, refresh_token, expire_in, shop_id de forma segura
    #     # associados ao seu usuário/loja.
    #     return f"Loja Shopee conectada com sucesso! Shop ID: {shop_id}"
    # else:
    #     return "Falha ao obter o access token da Shopee."
        
    return f"Callback preliminar bem-sucedido. Código: {auth_code}, Shop ID: {shop_id}. Implemente a troca de token."

# if __name__ == '__main__':
#     app.run(debug=True, port=5000) # Exemplo, não use debug=True em produção
Considerações Finais e Debugging:
Substitua as Constantes: Certifique-se de que SHOPEE_PARTNER_ID e SHOPEE_PARTNER_KEY estão corretos.
SHOPEE_REDIRECT_URI: Deve ser exatamente a mesma cadastrada no seu App na Shopee Open Platform e deve ser HTTPS.
Parâmetros Adicionais (auth_type, region, etc.):
Como mencionado no código, os parâmetros que você estava tentando usar (auth_type, is_auth_shop, login_type, region) não são parte da especificação padrão para a geração da assinatura da URL de autorização /api/v2/shop/auth_partner.
A documentação da Shopee é clara sobre a string base para o sign ser partner_id + api_path + timestamp.
Primeiro, faça funcionar com o método padrão (somente partner_id, redirect, timestamp, sign e opcionalmente state). Se, após isso, você identificar na documentação oficial que esses outros parâmetros são query params válidos e como eles devem ser incorporados (e se afetam ou não a assinatura), aí sim adicione-os. Geralmente, se são apenas informativos, eles podem ser adicionados à query string, mas não entram na base da assinatura para este endpoint específico.
Verifique o Location Header: Se o problema persistir, a primeira coisa a fazer é usar as Ferramentas de Desenvolvedor do Navegador (aba Rede/Network) para ver o valor do cabeçalho Location na resposta 302 da Shopee quando você acessa a URL de autorização gerada. Isso lhe dirá para onde a Shopee está realmente tentando te redirecionar.
Erro de Timestamp: A Shopee geralmente permite uma pequena janela de diferença (alguns minutos) para o timestamp. Certifique-se de que o servidor que gera o timestamp está com o horário sincronizado.
Ambiente (Sandbox vs. Produção): Certifique-se de que está usando as credenciais (partner_id, partner_key) e hosts corretos para o ambiente que você está testando (Sandbox ou Produção).
Ao seguir este guia e usar o código fornecido como base, você deverá ser capaz de gerar a URL de autorização correta e redirecionar seus clientes para a página de login da loja Shopee.