REGRAS DE SEGURANÇA - NÃO QUEBRE:
1. Validar TODOS os dados da Shopee
2. Verificar assinaturas

No arquivo server/shopee/security.js (CRIE este arquivo):

const crypto = require('crypto');
const securityLogger = require('../utils/securityLogger');

class ShopeeSecurityValidator {
  // Validar assinatura da Shopee
  validateWebhookSignature(payload, signature, secret) {
    const calculatedSignature = crypto
      .createHmac('sha256', secret)
      .update(JSON.stringify(payload))
      .digest('hex');
    
    return calculatedSignature === signature;
  }

  // Validar resposta da API
  validateApiResponse(response) {
    // Verificar se tem estrutura esperada
    if (!response || typeof response !== 'object') {
      securityLogger.log('INVALID_SHOPEE_RESPONSE', { response });
      return false;
    }

    // Verificar código de erro
    if (response.error || response.code !== 0) {
      securityLogger.log('SHOPEE_API_ERROR', { 
        error: response.error,
        code: response.code 
      });
      return false;
    }

    return true;
  }

  // Sanitizar dados do produto antes de salvar
  sanitizeProductData(product) {
    return {
      productId: String(product.item_id || ''),
      name: this.sanitizeString(product.name || ''),
      description: this.sanitizeString(product.description || ''),
      price: Math.abs(Number(product.price) || 0),
      stock: Math.abs(Math.floor(Number(product.stock) || 0)),
      images: Array.isArray(product.images) 
        ? product.images.filter(img => this.isValidUrl(img)).slice(0, 10)
        : [],
      category: this.sanitizeString(product.category || ''),
      status: ['active', 'inactive'].includes(product.status) ? product.status : 'active'
    };
  }

  sanitizeString(str, maxLength = 5000) {
    if (typeof str !== 'string') return '';
    
    // Remove caracteres de controle e limita tamanho
    return str
      .replace(/[\x00-\x1F\x7F-\x9F]/g, '') // Remove caracteres de controle
      .trim()
      .substring(0, maxLength);
  }

  isValidUrl(url) {
    try {
      const parsed = new URL(url);
      return ['http:', 'https:'].includes(parsed.protocol);
    } catch {
      return false;
    }
  }

  // Verificar limites de rate da API
  checkRateLimit(userId, endpoint) {
    // Implementar controle de rate limit por usuário/endpoint
    const key = `${userId}:${endpoint}`;
    // TODO: Implementar com Redis quando disponível
    return true; // Por enquanto sempre permite
  }
}

module.exports = new ShopeeSecurityValidator();

// No arquivo server/routes/shopee.js, ADICIONE no topo:
const shopeeSecurityValidator = require('../shopee/security');

// E use em TODAS as chamadas da API Shopee