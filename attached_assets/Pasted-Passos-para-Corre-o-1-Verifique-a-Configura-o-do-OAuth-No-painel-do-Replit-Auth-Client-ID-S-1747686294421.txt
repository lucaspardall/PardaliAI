Passos para Correção
1. Verifique a Configuração do OAuth
No painel do Replit Auth:

Client ID/Secret: Confira se estão corretos no .env:

env
REPLIT_CLIENT_ID=seu_client_id
REPLIT_CLIENT_SECRET=seu_client_secret
REPLIT_REDIRECT_URI=http://localhost:3000/api/auth/callback
Redirect URIs: Deve incluir:

URL local: http://localhost:3000/api/auth/callback

URL de produção: https://[seu-projeto].replit.app/api/auth/callback

2. Implementação do Servidor (Express.js)
javascript
// auth.js
import { ReplitAuth } from '@replit/auth';

const auth = new ReplitAuth({
  clientId: process.env.REPLIT_CLIENT_ID,
  clientSecret: process.env.REPLIT_CLIENT_SECRET,
  redirectUri: process.env.REPLIT_REDIRECT_URI,
  scopes: ['user:email', 'user:profile']
});

// Login
app.get('/api/login', (req, res) => {
  const authUrl = auth.getAuthUrl({
    state: crypto.randomBytes(16).toString('hex')
  });
  res.redirect(authUrl);
});

// Callback
app.get('/api/auth/callback', async (req, res) => {
  try {
    const { code, state } = req.query;
    const token = await auth.getToken(code);
    
    // Armazene o token na sessão
    req.session.user = {
      accessToken: token.access_token,
      refreshToken: token.refresh_token
    };
    
    res.redirect('/dashboard');
  } catch (error) {
    console.error('Erro na autenticação:', error);
    res.redirect('/login?error=auth_failed');
  }
});
3. Configuração de Sessões
javascript
// session.js
import session from 'express-session';
import RedisStore from 'connect-redis';

app.use(session({
  store: new RedisStore({
    url: process.env.REDIS_URL || 'redis://localhost:6379'
  }),
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000 // 24h
  }
}));
4. Middleware de Autenticação
javascript
// middleware/auth.js
export const requireAuth = (req, res, next) => {
  if (!req.session.user?.accessToken) {
    return res.status(401).json({ 
      message: 'Falha na autenticação',
      redirectTo: '/api/login'
    });
  }
  next();
};
Fluxo de Autenticação Corrigido
Diagram
Code
sequenceDiagram
  Client->>Servidor: GET /api/login
  Servidor->>Replit: Redireciona para auth.replit.com
  Replit->>Client: Login do usuário
  Client->>Servidor: GET /api/auth/callback?code=ABC123
  Servidor->>Replit: Troca code por token
  Replit-->>Servidor: Retorna access_token
  Servidor->>Client: Define cookie de sessão
  Client->>Servidor: Requests autenticados
Solução de Problemas Comuns
Erro	Causa Provável	Solução
invalid_client	Client ID/Secret incorretos	Verificar .env e painel Replit
redirect_uri_mismatch	URI não registrada	Atualizar Redirect URIs
invalid_grant	Código expirado/usado	Reiniciar fluxo OAuth
state_mismatch	Falha na validação do state	Implementar state handling
Melhores Práticas
HTTPS Obrigatório:
No Replit, use sempre https:// em produção

Gerenciamento de Tokens:

javascript
// Atualização de tokens
async function refreshToken(refreshToken) {
  const response = await fetch('https://auth.replit.com/oauth/refresh', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      client_id: process.env.REPLIT_CLIENT_ID,
      refresh_token: refreshToken
    })
  });
  return response.json();
}
Logs de Autenticação:

javascript
// Adicione middleware de logging
app.use((req, res, next) => {
  console.log(`[Auth] ${req.method} ${req.path} - ${req.sessionID}`);
  next();
});
Documentação oficial: Replit Auth Guide