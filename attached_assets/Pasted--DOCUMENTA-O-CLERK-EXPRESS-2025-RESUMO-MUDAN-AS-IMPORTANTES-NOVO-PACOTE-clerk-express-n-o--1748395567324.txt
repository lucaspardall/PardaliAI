 DOCUMENTA√á√ÉO CLERK EXPRESS 2025 - RESUMO
‚ö†Ô∏è MUDAN√áAS IMPORTANTES

NOVO PACOTE: @clerk/express (n√£o mais @clerk/clerk-sdk-node)
DEPRECA√á√ÉO: req.auth ‚Üí agora use req.auth() como FUN√á√ÉO

üöÄ INSTALA√á√ÉO
bashnpm install @clerk/express dotenv
üîë CONFIGURA√á√ÉO .env
envCLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...
üõ°Ô∏è MIDDLEWARE B√ÅSICO
javascriptimport 'dotenv/config'
import express from 'express'
import { clerkMiddleware } from '@clerk/express'

const app = express()

// Middleware b√°sico - anexa auth ao req
app.use(clerkMiddleware())
üîí PROTE√á√ÉO DE ROTAS
Op√ß√£o 1: requireAuth() - Redireciona se n√£o autenticado
javascriptimport { requireAuth, getAuth } from '@clerk/express'

// Protege rota espec√≠fica
app.get('/protected', requireAuth(), async (req, res) => {
  const { userId } = getAuth(req)
  // userId garantido aqui
})

// Com URL customizada
app.get('/admin', requireAuth({ signInUrl: '/login' }), handler)
Op√ß√£o 2: getAuth() - Controle manual
javascriptapp.get('/api/user', async (req, res) => {
  const { userId } = getAuth(req)
  
  if (!userId) {
    return res.status(401).json({ error: 'N√£o autenticado' })
  }
  
  // Buscar dados do usu√°rio
  const user = await clerkClient.users.getUser(userId)
  res.json(user)
})
üîß CLERK CLIENT
javascriptimport { clerkClient } from '@clerk/express'

// Buscar usu√°rio
const user = await clerkClient.users.getUser(userId)

// Listar usu√°rios
const users = await clerkClient.users.getUserList()
üéØ EXEMPLO COMPLETO CORRIGIDO
javascriptimport 'dotenv/config'
import express from 'express'
import { 
  clerkMiddleware, 
  requireAuth, 
  getAuth,
  clerkClient 
} from '@clerk/express'

const app = express()

// Middleware global
app.use(clerkMiddleware())

// Rota p√∫blica
app.get('/', (req, res) => {
  res.send('Home p√∫blica')
})

// Rota protegida com requireAuth
app.get('/dashboard', requireAuth(), async (req, res) => {
  const { userId } = getAuth(req)
  const user = await clerkClient.users.getUser(userId)
  res.json({ dashboard: true, user })
})

// API com controle manual
app.get('/api/auth/user', async (req, res) => {
  try {
    const { userId } = getAuth(req)
    
    if (!userId) {
      return res.status(401).json({ 
        error: 'Clerk user data not available' 
      })
    }
    
    const user = await clerkClient.users.getUser(userId)
    res.json({
      id: user.id,
      email: user.emailAddresses[0]?.emailAddress,
      name: user.firstName
    })
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

// Middleware customizado
const checkPermission = (req, res, next) => {
  const auth = getAuth(req)
  
  if (!auth.has({ permission: 'org:admin' })) {
    return res.status(403).json({ error: 'Sem permiss√£o' })
  }
  
  next()
}

app.get('/admin', requireAuth(), checkPermission, handler)

app.listen(3000)
üìù TYPESCRIPT
typescript// types/globals.d.ts
import '@clerk/express'

declare global {
  namespace Express {
    interface Request {
      auth: import('@clerk/express').AuthObject
    }
  }
}
‚ö° CORRE√á√ïES PARA SEU ERRO

Trocar req.auth por getAuth(req)
Verificar se userId existe antes de usar
Usar @clerk/express ao inv√©s de @clerk/clerk-sdk-node
Garantir que middleware est√° aplicado globalmente

Solu√ß√£o r√°pida para seu erro:
javascript// ‚ùå ERRADO
const { userId } = req.auth;

// ‚úÖ CORRETO
const { userId } = getAuth(req);