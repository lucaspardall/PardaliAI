Guia Abrangente para Implementação da "Minha Loja" com a API v2 da Shopee Open Platform
Introdução

A funcionalidade "Minha Loja", quando integrada ao "CIP Shopee", visa capacitar os vendedores da Shopee com um painel de controle robusto. Este painel permitirá a visualização de dados da loja e o gerenciamento de aspectos cruciais do seu negócio online diretamente na plataforma CIP Shopee. Isso engloba desde a visualização de informações da loja, gerenciamento de produtos, acompanhamento de pedidos e desempenho, até o manuseio de promoções.

A Shopee Open Platform (SOP) disponibiliza um conjunto de Interfaces de Programação de Aplicativos (APIs), sendo a API v2 o padrão atual. Esta API foi concebida para permitir que desenvolvedores integrem as funcionalidades de e-commerce da Shopee em aplicações de terceiros ou ferramentas específicas para vendedores. A API v2 oferece um leque de capacidades mais amplo e robusto em comparação com a versão v1, que foi descontinuada, abrangendo áreas como gestão de produtos, processamento de pedidos, marketing, entre outras. Ela opera sob princípios RESTful, com requisições e respostas tipicamente no formato JSON, e exige mecanismos de autenticação seguros para sua utilização.   

I. Primeiros Passos com a Shopee Open Platform

A jornada para integrar a funcionalidade "Minha Loja" começa com a familiarização e configuração na Shopee Open Platform. Este processo é fundamental para obter as credenciais necessárias e entender o ambiente de desenvolvimento.

Registo de Conta de Desenvolvedor e Configuração da Aplicação

Criação da Conta: O primeiro passo para os desenvolvedores é registar uma conta na Shopee Open Platform. A plataforma atende a diferentes perfis de desenvolvedores, incluindo "Shopee Seller" (Vendedor Shopee) para o desenvolvimento de ferramentas internas e "Third-party Partner Platform" (Plataforma de Parceiro Terceirizado) para ofertas de serviços mais amplas.   
Criação da Aplicação (App): Dentro do Console da Shopee Open Platform, os desenvolvedores devem criar uma "App". Este processo envolve a especificação do Tipo de App (por exemplo, "ERP System", "Product Management" ou "Seller In-house System", como recomendado para a integração Smartship em ), Nome da App, Descrição e Logotipo. A escolha do "Tipo de App" é determinante, pois define o conjunto padrão de permissões de API concedidas. Para uma funcionalidade "Minha Loja" abrangente, um tipo de App "ERP System" ou uma combinação de permissões dos tipos de app de gerenciamento de Produto, Pedido e Marketing seria necessária. Esta consideração surge da necessidade da "Minha Loja" de aceder a uma vasta gama de funcionalidades (informações da loja, produtos, pedidos, métricas, promoções). O tipo "ERP System" é descrito como tendo acesso a "Todas as APIs exceto API de Chat e API de Anúncios" , tornando-o um forte candidato. Alternativamente, seria preciso garantir que o tipo de app escolhido cubra permissões para as APIs de Produto, Pedido, Loja, Desconto, Mídia e Públicas, conforme listado em.   
Credenciais: Após a criação da app, são fornecidos um ID de Parceiro de Teste (Test Partner ID) e uma Chave de Teste (Test Key) para utilização no ambiente de sandbox. Para o ambiente de produção, a app deve passar pelo processo de "Go Live", após o qual são emitidos um ID de Parceiro de Produção (Live Partner ID) e uma Chave de Produção (Live Key). Os documentos  detalham este processo, enfatizando a distinção entre credenciais de teste e de produção. O documento  oferece passos práticos para obter essas chaves, particularmente para um "Seller In House System".   
Navegando na API v2: Conceitos Chave e Ambientes

Versionamento da API: A Shopee transitou da OpenAPI 1.0 para a OpenAPI 2.0, sendo a v1.0 descontinuada. Todo novo desenvolvimento deve utilizar a API v2. Apps recém-criadas possuem apenas permissões para a API v2.0.   
Ambientes:
Sandbox: Destinado ao desenvolvimento e testes, utilizando o ID de Parceiro de Teste e Chave de Teste. URLs de teste são fornecidas (ex: https://partner.test-stable.shopeemobile.com, https://openplatform.sandbox.test-stable.shopee.sg).   
Produção: Para aplicações em funcionamento, utilizando o ID de Parceiro de Produção e Chave de Produção. Devem ser usadas as URLs de produção (ex: https://partner.shopeemobile.com para desenvolvedores locais, https://openplatform.shopee.cn para a China Continental). O Brasil possui sua própria URL de produção: https://openplatform.shopee.com.br. A existência de URLs distintas para diferentes regiões (China Continental, Brasil, geral) e ambientes é um detalhe operacional crítico. Os desenvolvedores devem garantir que sua aplicação possa selecionar dinamicamente a URL base correta. Documentos como  listam consistentemente diferentes URLs base. O documento  afirma explicitamente que https://openplatform.shopee.cn/ é para desenvolvedores da China Continental e https://partner.shopeemobile.com/ para desenvolvedores locais, e que o endereço HTTP correto para a localização do servidor deve ser escolhido. Isso implica que uma aplicação projetada para múltiplos mercados, ou implementada em diferentes regiões, precisa ser configurável para usar a URL base apropriada.   
Fluxo de Chamada da API: Geralmente envolve autenticação, assinatura da requisição, realização de requisições HTTP (GET/POST) para caminhos de API específicos e tratamento de respostas JSON.   
II. Autenticação e Autorização: O Portal para as APIs da Shopee

A segurança e o acesso controlado aos dados da loja são primordiais. A API v2 da Shopee utiliza mecanismos robustos de autenticação e autorização para garantir que apenas aplicações e usuários autorizados possam interagir com os recursos da plataforma.

O Fluxo de Autorização OAuth 2.0
A API v2 da Shopee emprega o OAuth 2.0 para autorização, permitindo que aplicações de terceiros acedam aos dados da loja com o consentimento do vendedor.   

Visão Geral do Processo:
Iniciação: A aplicação redireciona o vendedor para a URL de autorização da Shopee. Esta URL é construída utilizando o partner_id da aplicação e uma redirect_url previamente configurada. O SDK PHP mu-hanz/shoapi, por exemplo, fornece um método para gerar esta URL de autorização: Shoapi::call('shop')->access('auth_partner')->redirect();.   
Consentimento do Vendedor: O vendedor efetua login na sua conta Shopee e concede as permissões solicitadas pela aplicação.   
Código de Autorização: A Shopee redireciona o vendedor de volta para a redirect_url da aplicação, incluindo um code de autorização e o shop_id (ou main_account_id) nos parâmetros da query.   
Obtenção e Gerenciamento de Tokens de Acesso
Os tokens de acesso são as credenciais que permitem à aplicação fazer chamadas autenticadas à API em nome do vendedor.

Obtendo o Token de Acesso Inicial (/api/v2/auth/token/get):
A aplicação troca o code (e shop_id ou main_account_id) por um access_token e um refresh_token chamando este endpoint.   
Parâmetros da Requisição (): code (string, obrigatório), partner_id (int, obrigatório), shop_id (int, opcional, se não usar main_account_id), main_account_id (int, opcional).   
Campos da Resposta (): access_token (string, válido por 4 horas), refresh_token (string, válido por 30 dias), expire_in (int32, validade do token de acesso em segundos), merchant_id_list (array de int32, se main_account_id usado), shop_id_list (array de int32, se main_account_id usado).   
O documento  é a referência primária para a obtenção dos tokens iniciais. O SDK PHP mu-hanz/shoapi  exemplifica esta chamada: Shoapi::call('auth')->access('get_access_token')->shop(000000)->request($params)->response();.   
É fundamental notar que o access_token possui uma validade de 4 horas , o que torna imprescindível um mecanismo de atualização para operação contínua. Aplicações que necessitam de acesso persistente, como a "Minha Loja", não podem depender de um único token de curta duração.   
Atualizando o Token de Acesso (/api/v2/auth/access_token/get):
Utilizado para obter um novo access_token e um novo refresh_token antes que o access_token atual expire, usando o refresh_token existente.   
Parâmetros da Requisição (): refresh_token (string, obrigatório), partner_id (int, obrigatório, no corpo da requisição), shop_id (int, opcional, se não for merchant_id), merchant_id (int, opcional).   
Campos da Resposta (): Novo access_token, novo refresh_token, expire_in.   
O documento  é a referência primária. O SDK PHP mu-hanz/shoapi  exemplifica: Shoapi::call('auth')->access('refresh_access_token')->shop(000000)->request($params)->response();.   
Um detalhe crítico é que o access_token e o refresh_token devem ser armazenados e atualizados separadamente para cada shop_id e merchant_id. Além disso, cada refresh_token pode ser usado apenas uma vez. A natureza de uso único do refresh_token significa que a aplicação deve sempre armazenar o novo refresh_token recebido após uma atualização bem-sucedida. O documento  declara: "Refresh_token can be used once only, this API will also return a new refresh_token." Isso implica que o refresh_token antigo torna-se inválido. A lógica de gerenciamento de tokens da aplicação deve ser robusta para substituir o refresh_token antigo pelo novo.   
Elaborando Requisições Assinadas (HMAC-SHA256)
Todas as requisições à API exigem um parâmetro sign nos parâmetros comuns. Esta assinatura é gerada usando HMAC-SHA256.   

Construção da String Base: A string base é uma concatenação do partner_id, o caminho da API (ex: /api/v2/shop/get_profile), timestamp, access_token (para chamadas autenticadas) e shop_id (para chamadas de nível de loja). Para APIs públicas (como /api/v2/auth/token/get ou /api/v2/public/*), access_token e shop_id não fazem parte da string base para a assinatura.   
O documento  fornece exemplos em PHP. Para APIs de nível de loja: $tokenBaseString = $partner_id.$api_path.$timestamp.$access_token.$shop_id;. Para APIs públicas (como geração de token): $base_str = $partner_id.$api_path.$timestamp;. O padrão mais consistente para chamadas autenticadas e específicas da loja inclui partner_id, api_path, timestamp, access_token, shop_id.   
A assinatura da API principal da Shopee Open Platform para requisições GET normalmente não envolve o corpo da requisição na própria string base da assinatura; os parâmetros comuns são enviados na string de consulta. Para requisições POST/PUT com corpo JSON, a assinatura ainda é baseada em parâmetros comuns de cabeçalho/consulta, não no conteúdo do corpo em si para a assinatura principal.   
Hashing: A string base é hasheada usando HMAC-SHA256 com a partner_key (chave secreta).   
Parâmetros Comuns:
partner_id: O ID de Parceiro da sua aplicação (int).
timestamp: Timestamp UNIX atual (segundos). As requisições expiram em 5 minutos.   
sign: A assinatura HMAC-SHA256 gerada (string).
access_token: Obrigatório para a maioria das APIs não públicas (string).
shop_id: Identificador único da Shopee para uma loja, obrigatório para a maioria das APIs específicas da loja (int).
Estes parâmetros são consistentemente listados na seção "Common Parameters" da documentação dos endpoints da API.   
Tabela: Parâmetros Comuns de Requisição da API

Nome do Parâmetro	Tipo	Descrição	Exemplo	Normalmente Obrigatório Para
partner_id	int	ID de Parceiro atribuído no registo da aplicação.	123456	Todas as requisições
timestamp	int	Timestamp UNIX da requisição (em segundos). Expira em 5 minutos.	1610000000	Todas as requisições
sign	string	Assinatura gerada via HMAC-SHA256.	e318d3e932719916a9f9ebb57e2011961bd47abfa54a36e040d050d8931596e2	Todas as requisições
access_token	string	Token para acesso à API, identificando a permissão. Válido por 4 horas.	c09222e3fc40ffb25fc947f738b1abf1	Maioria das APIs não públicas (que modificam ou obtêm dados da loja)
shop_id	int	Identificador único da Shopee para uma loja.	600000	Maioria das APIs de nível de loja

Exportar para as Planilhas
Compreendendo Permissões e Escopos da API para a "Minha Loja"
As permissões estão vinculadas ao Tipo de App selecionado durante a criação da app. Apps do tipo "ERP System" geralmente possuem acesso amplo, enquanto "Product Management", "Order Management", etc., têm permissões mais específicas. A funcionalidade "Minha Loja" requer acesso às APIs de Loja, Produto, Pedido, Métricas/Analytics (Saúde da Conta), Promoções, Categoria e Mídia.
O documento  (lista de permissões da API para o Tipo de App de Gerenciamento de Produto) lista muitas APIs relevantes como v2.shop.get_shop_info, v2.shop.get_profile, várias APIs de Produto, APIs de Pedido, Logística, Pagamento, Devoluções, APIs Públicas e de Push. O documento  fornece uma lista de APIs para o tipo de app "Customer Service", que também inclui APIs de Chat, Produto, Pedido, Logística, Pagamento, Devolução, Voucher, Públicas e de Push.
Embora a documentação da Shopee  agrupe permissões por Tipo de App e liste módulos de API acessíveis ou endpoints específicos, ela não utiliza o termo "escopos" no sentido típico do OAuth (como orders.read, products.write vistos em ). A autorização parece ser concedida em um nível mais amplo de app ou módulo com base no Tipo de App, em vez de escopos granulares por endpoint solicitados durante o fluxo OAuth. As permissões são implicitamente concedidas quando um vendedor autoriza uma app de um determinado tipo. A solicitação do usuário menciona "permissões e escopos". Documentos como  (Printify) e  (melhores práticas OAuth da Curity) descrevem escopos OAuth típicos. No entanto, a documentação da Shopee detalha o acesso à API com base no "Tipo de App". Não há menção explícita de solicitar escopos específicos baseados em strings durante o redirecionamento OAuth na documentação da Shopee. Portanto, "escopos" no contexto da Shopee provavelmente se referem ao conjunto de funcionalidades da API que uma app tem permissão para usar com base em seu tipo registado e na autorização do vendedor.   

Tabela: Módulos de API Chave e Endpoints Necessários para "Minha Loja"

Módulo	Funcionalidade Necessária para "Minha Loja"	Endpoints Chave da API v2 (Exemplos)
Autenticação	Autorizar acesso à loja, obter e atualizar tokens	/api/v2/auth/token/get, /api/v2/auth/access_token/get
Gerenciamento da Loja	Visualizar informações básicas e perfil detalhado da loja	/api/v2/shop/get_shop_info, /api/v2/shop/get_profile
Gerenciamento de Produtos	Listar, visualizar, adicionar, atualizar, remover produtos, preços e estoque	/api/v2/product/get_item_list, /api/v2/product/get_item_base_info, /api/v2/product/add_item, /api/v2/product/update_item, /api/v2/product/update_price, /api/v2/product/update_stock, /api/v2/product/get_model_list
Gerenciamento de Pedidos	Listar pedidos, visualizar detalhes de pedidos, filtrar por status	/api/v2/order/get_order_list, /api/v2/order/get_order_detail
Métricas e Analytics	Visualizar desempenho da loja, desempenho de produtos, avaliações	/api/v2/shop/get_shop_performance (ou APIs de Account Health), /api/v2/product/get_item_extra_info, /api/v2/product/get_comment, /api/v2/product/get_item_promotion
Promoções	Adicionar, listar, atualizar e encerrar descontos e promoções	/api/v2/discount/add_discount, /api/v2/discount/get_discount_list, /api/v2/discount/update_discount, /api/v2/discount/end_discount, /api/v2/discount/add_discount_item
Categorias	Obter categorias disponíveis, atributos de categorias, categorias recomendadas	/api/v2/product/get_category, /api/v2/product/get_attributes, /api/v2/product/category_recommend
Mídia	Fazer upload de imagens e vídeos, listar arquivos de mídia	/api/v2/media_space/upload_image, /api/v2/media_space/init_video_upload (e outros para vídeo), /api/v2/media_space/get_media_list

Exportar para as Planilhas
III. Funcionalidade Principal da "Minha Loja": Um Mergulho Profundo nos Endpoints da API v2 da Shopee

Para cada endpoint, detalhar-se-á o seu propósito, caminho da API, parâmetros chave da requisição (nome, tipo, obrigatoriedade, descrição) e campos primários da resposta, com referência a documentos específicos.

A. APIs de Gerenciamento da Loja

1. Recuperando Informações Básicas da Loja (/api/v2/shop/get_shop_info)
Referência no Documento do Usuário: /api/v2/shop/get_shop_info
Confirmação Documental:  (lista de permissões da API para o Tipo de App de Gerenciamento de Produto) lista v2.shop.get_shop_info.  (SDK PHP) também se refere a /api/v2/shop/get_shop_info. O documento  detalha /api/v2/shop/get_warehouse_detail que pode ser relacionado, mas get_shop_info é mais genérico.   
Propósito: Obter dados fundamentais sobre a loja.
Parâmetros da Requisição: Parâmetros comuns de autenticação (partner_id, timestamp, access_token, shop_id, sign).
Campos da Resposta: Provavelmente shop_name, shop_description, country, status, create_time, expire_time para autorização. O campo expire_time mencionado em  (de v2.shop.get_shop_info) é crucial para gerenciar proativamente a expiração do token/autorização. O documento  afirma que uma forma de saber se a autorização da loja está prestes a expirar é "Chamar a API v2.shop.get_shop_info para obter o campo expire_time." Isso implica que v2.shop.get_shop_info retorna um expire_time relacionado à autorização da app para aquela loja. Para que a "Minha Loja" mantenha acesso contínuo, ela deve monitorizar este expire_time.   
2. Acessando Dados Detalhados do Perfil da Loja (/api/v2/shop/get_profile)
Referência no Documento do Usuário: /api/v2/shop/get_profile
Confirmação Documental:  fornecem documentação oficial para este endpoint.  também o lista.   
Propósito: Obter informações detalhadas do perfil da loja, incluindo logotipo, nome e descrição.
Caminho da API: GET /api/v2/shop/get_profile
Parâmetros da Requisição (): Parâmetros comuns de autenticação.   
Campos da Resposta (): request_id, error, message, response (objeto com shop_logo, description, shop_name, invoice_issuer).   
3. Monitorando Métricas de Desempenho da Loja (ex: /api/v2/shop/get_shop_performance_v2)
Referência no Documento do Usuário: /api/v2/shop/get_shop_performance e /api/v2/shop/get_shop_performance_v2.
Confirmação Documental: Os endpoints exatos /api/v2/shop/get_shop_performance ou /api/v2/shop/get_shop_performance_v2 carecem de documentação oficial detalhada e direta nos materiais fornecidos ( inacessíveis). Contudo (SDK mu-hanz/shoapi) lista suporte para shop_performance e shop_penalty sob um módulo "Account Health", sugerindo que estas são as APIs relevantes para métricas de desempenho. O documento  (Apify scraper) menciona vários caminhos de API v4 como /api/v4/shop/get_shop_base para detalhes da loja, mas não desempenho, sendo provavelmente internos e não da Open API.   
Propósito: Recuperar indicadores chave de desempenho (KPIs) para a loja, como vendas, taxas de conversão, tráfego, etc.
Parâmetros da Requisição: Parâmetros comuns de autenticação. Provavelmente filtros de período de tempo.
Campos da Resposta: Métricas específicas relacionadas ao desempenho da loja. (Detalhes viriam da documentação real destas APIs de Account Health). A distinção no documento do usuário entre get_shop_performance e get_shop_performance_v2 implica uma evolução ou diferentes escopos de dados. O módulo "Account Health" do SDK é uma pista forte. É altamente provável que os dados de desempenho sejam expostos através destas APIs relacionadas à "Saúde da Conta".
4. Buscando Avaliações/Comentários da Loja e Produtos (/api/v2/product/get_comment)
Referência no Documento do Usuário: /api/v2/shop/get_comment (Nota: discrepância de caminho)
Confirmação Documental:  fornecem documentação oficial para /api/v2/product/get_comment. Este caminho é para comentários de produtos, não comentários gerais da loja.   
Propósito: Recuperar comentários e avaliações para produtos.
Caminho da API: GET /api/v2/product/get_comment
Parâmetros da Requisição (): Parâmetros comuns de autenticação, item_id (opcional), comment_id (opcional), cursor (string, obrigatório para paginacão), page_size (int32, obrigatório, 1-100).   
Campos da Resposta (): request_id, error, message, response (objeto com more, next_cursor, item_comment_list [array de comentários incluindo order_sn, comment_id, comment, buyer_username, item_id, rating_star, editable, hidden, create_time, comment_reply, media]).   
A API é centrada no produto para comentários. Se a "Minha Loja" necessitar de avaliações gerais da loja, um endpoint diferente (se disponível) seria necessário. O caminho /api/v2/shop/get_comment do documento do usuário parece incorreto com base em. Os parâmetros (item_id, comment_id) e a estrutura da resposta (item_comment_list) em  confirmam a sua natureza específica do produto.   
B. APIs de Gerenciamento do Ciclo de Vida do Produto (Operações CRUD)

1. Listando e Pesquisando Produtos (/api/v2/product/get_item_list)
Referência no Documento do Usuário: /api/v2/product/get_item_list
Confirmação Documental:  fornecem documentação oficial.   
Propósito: Recuperar uma lista de itens numa loja, com opções de paginação e filtragem.
Caminho da API: GET /api/v2/product/get_item_list
Parâmetros da Requisição (): Parâmetros comuns de autenticação, offset (int64, obrigatório), page_size (int64, obrigatório, máx 100), update_time_from (timestamp, opcional), update_time_to (timestamp, opcional), item_status (array de string, opcional ex: NORMAL, BANNED), buyer_shop_id (int64, opcional).   
Campos da Resposta (): request_id, error, message, response (objeto com item [array de item_id, item_status, update_time], total_count, has_next_page, next_offset).   
2. Buscando Detalhes Principais do Produto (/api/v2/product/get_item_base_info)
Referência no Documento do Usuário: /api/v2/product/get_item_base_info
Confirmação Documental:  (embora  seja parcial) fornecem documentação oficial.   
Propósito: Obter informações básicas para uma lista de itens.
Caminho da API: GET /api/v2/product/get_item_base_info
Parâmetros da Requisição (): Parâmetros comuns de autenticação, item_id_list (array de int64, obrigatório, máx 50), need_tax_info (bool, opcional), need_complaint_policy (bool, opcional).   
Campos da Resposta (): request_id, error, message, response (objeto com item_list [array de itens incluindo item_id, category_id, item_name, description, item_sku, create_time, update_time, price_info, stock_info, image, weight, dimension, logistic_info, pre_order, condition, status, etc.]).   
3. Recuperando Dados Estendidos do Produto (/api/v2/product/get_item_extra_info)
Referência no Documento do Usuário: /api/v2/product/get_item_extra_info
Confirmação Documental:.   
Propósito: Obter informações extras de itens como vendas, visualizações, curtidas, avaliação por estrelas e contagem de comentários.
Caminho da API: GET /api/v2/product/get_item_extra_info
Parâmetros da Requisição (): Parâmetros comuns de autenticação, item_id_list (array de int64, obrigatório, limite 50).   
Campos da Resposta (): request_id, error, message, response (objeto com item_list [array de itens incluindo item_id, sale (volume de vendas), views, likes, rating_star, comment_count]).   
4. Adicionando Novos Produtos (/api/v2/product/add_item)
Referência no Documento do Usuário: /api/v2/product/add_item
Confirmação Documental:  (guia do desenvolvedor para criar produtos) (inacessível, mas o título confirma).  é crucial, pois descreve o processo de múltiplos passos.   
Propósito: Adicionar um novo produto à loja. Esta é uma operação complexa que envolve uploads de mídia, seleção de categoria e atributos, e informações logísticas.
Caminho da API: POST /api/v2/product/add_item
Passos Chave de :   
Upload de Mídia: Fazer upload de imagens (v2.media_space.upload_image) e vídeos (múltiplos passos: init_video_upload, upload_video_part, complete_video_upload, get_video_upload_result). IDs de imagem/IDs de upload de vídeo são usados em add_item.
Categoria e Atributos: category_id é obrigatório. Atributos (attribute_list) devem ser fornecidos de acordo com os tipos obtidos via v2.product.get_attributes.
Informações Logísticas: Array logistic_info especificando canais habilitados e potencialmente taxas de envio.
Corpo da Requisição (Conceptual com base em  e APIs típicas de adição de item): Objeto JSON incluindo item_name, description, category_id, price_info, stock_info, image (com image_id_list), attribute_list, logistic_info, pre_order, condition, weight, dimension, etc.   
Campos da Resposta: Provavelmente item_id do produto recém-criado, juntamente com outros detalhes.
Adicionar um produto não é uma única chamada de API se envolver mídia. O documento  afirma explicitamente: "Imagens e vídeos dos seus produtos precisam ser pré-armazenados no espaço de mídia da Shopee. Portanto, você precisa chamar a API MediaSpace para fazer o upload primeiro." Isso implica uma dependência de fluxo de trabalho: Gerenciamento de Mídia -> Adição de Produto.   
5. Atualizando Informações do Produto (/api/v2/product/update_item)
Referência no Documento do Usuário: /api/v2/product/update_item
Confirmação Documental:.   
Propósito: Atualizar detalhes de um produto existente.
Caminho da API: POST /api/v2/product/update_item
Corpo da Requisição (): Objeto JSON com item_id (obrigatório) e campos para atualizar, ex: item_name, description, weight, pre_order, attribute_list, category_id, images, dimension, condition, video_upload_id, campos fiscais (tax_code, csosn, origin, cest para BR).   
Campos da Resposta: Provavelmente confirmação da atualização, item_id, update_time.
6. Gerenciando Preços de Produtos (/api/v2/product/update_price)
Referência no Documento do Usuário: /api/v2/product/update_price
Confirmação Documental:.   
Propósito: Atualizar o preço dos modelos de produto.
Caminho da API: POST /api/v2/product/update_price
Corpo da Requisição (): item_id (obrigatório), price_list (array de objetos, cada um com model_id e original_price).   
Campos da Resposta (): response (objeto com failure_list [model_id, failed_reason] e success_list [model_id, original_price]).   
Restrição (): Não é possível editar o preço se o item/modelo estiver em promoção.   
7. Gerenciando Estoque de Produtos (/api/v2/product/update_stock e /api/v2/global_product/update_stock)
Referência no Documento do Usuário: /api/v2/product/update_stock
Confirmação Documental (Não Global):  fornecem documentação oficial para /api/v2/product/update_stock.   
Confirmação Documental (Global):  fornecem documentação oficial para /api/v2/global_product/update_stock (para vendedores da China continental e Coreia).   
Propósito (Não Global): Atualizar estoque para modelos de um item. Atualiza apenas "seller_stock".
Caminho da API (Não Global): POST /api/v2/product/update_stock
Corpo da Requisição (Não Global): item_id (obrigatório), stock_list (array de objetos, cada um com model_id (0 para item sem modelo), seller_stock [array com location_id (opcional), stock (obrigatório)]).   
Campos da Resposta (Não Global): response (objeto com failure_list e success_list para modelos).   
Propósito (Global): Atualizar estoque para modelos de produtos globais.
Caminho da API (Global): POST /api/v2/global_product/update_stock
Corpo da Requisição (Global): global_item_id (obrigatório), stock_list (array de objetos, cada um com global_model_id, seller_stock [array com location_id (opcional para não-3PF), stock]).   
Endpoints separados para gerenciamento de estoque de produtos regulares e globais indicam diferentes modelos de dados ou requisitos regionais. O documento  especifica que /api/v2/global_product/update_stock é "Apenas para vendedores da China continental e Coreia". O parâmetro location_id sugere capacidades de multi-armazém.   
8. Lidando com Variações e Modelos de Produtos (/api/v2/product/get_model_list)
Referência no Documento do Usuário: /api/v2/product/get_model_list
Confirmação Documental:.   
Propósito: Obter a lista de modelos (variações) para um determinado item.
Caminho da API: GET /api/v2/product/get_model_list
Parâmetros da Requisição (): Parâmetros comuns de autenticação, item_id (obrigatório).   
Campos da Resposta (): response (objeto com tier_variation [array definindo níveis de variação como cor, tamanho], model [array de objetos de modelo incluindo model_id, model_sku, price_info, stock_info_v2 (estoque atual, estoque reservado), informações de pre_order]).   
9. Removendo Produtos e Modelos (/api/v2/product/delete_item, /api/v2/product/delete_model)
Referência no Documento do Usuário: /api/v2/product/delete_item
Confirmação Documental (Remover Item):  fornece documentação oficial para /api/v2/product/delete_item.   
Confirmação Documental (Remover Modelo):  fornecem documentação oficial para /api/v2/product/delete_model.   
Propósito (Remover Item): Remover um item de produto.
Caminho da API (Remover Item): POST /api/v2/product/delete_item
Corpo da Requisição (Remover Item): item_id (int64, obrigatório).   
Propósito (Remover Modelo): Remover um modelo específico (variação) de um item.
Caminho da API (Remover Modelo): POST /api/v2/product/delete_model
Corpo da Requisição (Remover Modelo): item_id (obrigatório), model_id (obrigatório).   
Existem dois endpoints distintos. Remover o último modelo de um item pode não remover automaticamente o item em si, ou pode haver restrições. A documentação para delete_model  lista um erro "error_model_item_must_have_one_model: Item cannot be without model when item is under promotion," implicando que um item geralmente precisa de pelo menos um modelo.   
C. APIs de Processamento de Pedidos e Análise de Vendas

1. Recuperando Listas de Pedidos (incluindo filtragem por status via /api/v2/order/get_order_list)
Referência no Documento do Usuário: /api/v2/order/get_order_list e /api/v2/order/get_order_by_status. (Nota: get_order_by_status parece ser coberto por get_order_list com o parâmetro order_status).
Confirmação Documental:  fornecem documentação oficial para /api/v2/order/get_order_list.  detalha /api/v2/order/get_shipment_list que é para pedidos READY_TO_SHIP.  (SDK Python) usa get_order_by_status que provavelmente mapeia para get_order_list com o filtro de status.   
Propósito: Pesquisar e recuperar uma lista de pedidos, filtrável por intervalo de tempo e status do pedido.
Caminho da API: GET /api/v2/order/get_order_list
Parâmetros da Requisição (): Parâmetros comuns de autenticação, time_range_field (string, obrigatório, ex: create_time), time_from (timestamp, obrigatório), time_to (timestamp, obrigatório, intervalo máx de 15 dias), page_size (int32, obrigatório, 1-100), cursor (string, opcional para paginacão), order_status (string, opcional, ex: UNPAID, READY_TO_SHIP, COMPLETED), response_optional_fields (string, opcional, ex: order_status).   
Campos da Resposta (): request_id, error, message, response (objeto com more, next_cursor, order_list [array de order_sn, opcional order_status]).   
Os parâmetros time_range_field e time_from/time_to com um intervalo máximo de 15 dias  significam que a busca de dados históricos de pedidos requer múltiplas chamadas de API em lote. Para recuperar pedidos que abrangem vários meses ou anos, uma única chamada de API é insuficiente. A aplicação deve implementar lógica para iterar através de janelas de 15 dias (ou menores).   
2. Buscando Detalhes Abrangentes do Pedido (/api/v2/order/get_order_detail)
Referência no Documento do Usuário: /api/v2/order/get_order_detail
Confirmação Documental:  (definição de struct do Go SDK sugere parâmetros como order_sn_list, response_optional_fields).  estão inacessíveis ou mostram apenas títulos, portanto, falta documentação oficial detalhada nos materiais.  menciona "Get Order Detail API" como uma API principal.   
Propósito: Recuperar informações detalhadas para um ou mais pedidos.
Caminho da API: GET /api/v2/order/get_order_detail (suposição, pois é um GET em SDKs e prática comum)
Parâmetros da Requisição (deduzido de  e documento do usuário): Parâmetros comuns de autenticação, order_sn_list (array de strings, números de série do pedido), response_optional_fields (array de strings, para especificar quais seções de dados retornar, ex: buyer_info, item_list, payment_info, shipping_info).   
Campos da Resposta (conceptual): order_sn, detalhes do comprador, endereço do destinatário, lista de itens no pedido (nome, SKU, quantidade, preço), método de pagamento, valor total, moeda, transportadora, número de rastreamento, status do pedido, timestamps.
O parâmetro response_optional_fields é chave para otimizar chamadas de API. A "Minha Loja" deve solicitar apenas os campos de dados que realmente precisa exibir ou processar.
D. APIs de Gerenciamento de Promoções e Descontos

Referência no Documento do Usuário: Lista add_discount, get_discount_list, update_discount, end_discount, add_discount_item.
Confirmação Documental:
v2.discount.add_discount:. (guia do vendedor BR) confirma seu uso.   
v2.discount.get_discount_list:  confirma.  inacessíveis ou apenas títulos.  é para get_discount (único).   
v2.discount.update_discount:  (issue do GitHub menciona otimizá-lo).  confirma.   
v2.discount.end_discount:  confirma.   
v2.discount.add_discount_item:  confirma.   
1. Criando Campanhas de Desconto (/api/v2/discount/add_discount)
Caminho da API: POST /api/v2/discount/add_discount    
Parâmetros da Requisição (): Parâmetros comuns de autenticação, discount_name (string, obrigatório), start_time (timestamp, obrigatório), end_time (timestamp, obrigatório). Restrições de tempo de início/fim se aplicam.   
Campos da Resposta (): discount_id.   
2. Gerenciando Itens com Desconto (/api/v2/discount/add_discount_item)
Caminho da API: (Provavelmente POST /api/v2/discount/add_discount_item, detalhes não nos materiais, mas confirmado por ).   
Parâmetros da Requisição: Parâmetros comuns de autenticação, discount_id, lista de itens com item_id, model_id (se aplicável), item_promotion_price, promotion_stock, purchase_limit.
Campos da Resposta: Confirmação dos itens adicionados.
3. Listando e Visualizando Descontos (/api/v2/discount/get_discount_list e /api/v2/discount/get_discount)
/api/v2/discount/get_discount_list: Para obter uma lista de promoções de desconto.
Parâmetros da Requisição (Conceptual, com base em  e APIs de lista típicas): Parâmetros comuns de autenticação, discount_status (ex: upcoming, ongoing, expired), page_no, page_size.   
Campos da Resposta: Lista de descontos com discount_id, discount_name, start_time, end_time, status.
/api/v2/discount/get_discount: Para obter detalhes de um desconto específico, incluindo itens.    
Parâmetros da Requisição (): Parâmetros comuns de autenticação, discount_id (obrigatório), page_no (obrigatório para paginacão da lista de itens), page_size (obrigatório).   
Campos da Resposta (): discount_id, status, discount_name, start_time, end_time, item_list (array com detalhes de item/modelo, preços, estoques), more.   
4. Atualizando Campanhas de Desconto (/api/v2/discount/update_discount)
Caminho da API: (Provavelmente POST /api/v2/discount/update_discount, confirmado por ).   
Parâmetros da Requisição: Parâmetros comuns de autenticação, discount_id, campos para atualizar (ex: discount_name, start_time, end_time).
Campos da Resposta: Confirmação da atualização.
5. Encerrando Promoções de Desconto (/api/v2/discount/end_discount)
Caminho da API: (Provavelmente POST /api/v2/discount/end_discount, confirmado por ).   
Parâmetros da Requisição: Parâmetros comuns de autenticação, discount_id.
Campos da Resposta: Confirmação do encerramento.
O gerenciamento de descontos envolve múltiplos endpoints relacionados. O endpoint get_discount  é crucial para buscar detalhes, incluindo os itens dentro de um desconto específico, o que get_discount_list pode não fornecer de forma granular. Para exibir uma lista de descontos e depois permitir que o usuário visualize/edite itens dentro de um desconto selecionado, a "Minha Loja" chamaria primeiro get_discount_list, depois get_discount para o selecionado.   
E. APIs de Gerenciamento de Categorias e Atributos

1. Buscando Categorias de Produtos (/api/v2/product/get_category e /api/v2/global_product/get_category)
Referência no Documento do Usuário: /api/v2/category/get_categories (Nota: discrepância de caminho, docs oficiais usam /product/get_category).
Confirmação Documental (Não Global):  (parcial) fornecem documentação oficial para /api/v2/product/get_category.  inacessíveis ou apenas títulos.  (exemplo JS) usa /api/v2/shop/get_categories - parece ser uma API mais antiga ou diferente, os docs oficiais apontam para /product/.   
Confirmação Documental (Global):  fornecem documentação oficial para /api/v2/global_product/get_category (para vendedores da China continental e Coreia).   
Propósito (Não Global): Recuperar a lista de categorias de produtos disponíveis para a região de uma loja.
Caminho da API (Não Global): GET /api/v2/product/get_category    
Parâmetros da Requisição (Não Global): Parâmetros comuns de autenticação, language (string, opcional, ex: en, id do exemplo ).   
Campos da Resposta (Não Global): response (objeto com category_list [array de category_id, parent_category_id, original_category_name, display_category_name, has_children]).   
Propósito (Global): Obter categorias globais.
Caminho da API (Global): GET /api/v2/global_product/get_category    
Parâmetros da Requisição (Global): Parâmetros comuns de autenticação (usando merchant_id em vez de shop_id), language (opcional).   
2. Recuperando Atributos Específicos da Categoria (/api/v2/product/get_attributes e /api/v2/global_product/get_attributes)
Referência no Documento do Usuário: /api/v2/category/get_attributes (Nota: discrepância de caminho)
Confirmação Documental (Não Global):  fornecem documentação oficial para /api/v2/product/get_attributes.  inacessível.   
Confirmação Documental (Global):  fornece documentação oficial para /api/v2/global_product/get_attributes.   
Propósito: Obter atributos para uma categoria folha, essencial para a listagem de produtos.
Caminho da API (Não Global): GET /api/v2/product/get_attributes
Parâmetros da Requisição (Não Global): Parâmetros comuns de autenticação, language (opcional), category_id (int64, obrigatório, deve ser categoria folha).   
Campos da Resposta (Não Global): response (objeto com attribute_list [array de atributos incluindo attribute_id, original_attribute_name, is_mandatory, input_type, format_type, attribute_value_list etc.]).   
3. Utilizando Recomendações de Categoria (/api/v2/product/category_recommend)
Referência no Documento do Usuário: /api/v2/category/get_category_recommend (Nota: discrepância de caminho)
Confirmação Documental:  fornecem documentação oficial para /api/v2/product/category_recommend.  inacessível.   
Propósito: Recomendar categorias com base no nome do item (e opcionalmente imagem).
Caminho da API: GET /api/v2/product/category_recommend
Parâmetros da Requisição (): Parâmetros comuns de autenticação, item_name (string, obrigatório), product_cover_image (string, opcional, image_id do espaço de mídia).   
Campos da Resposta (): response (objeto com category_id).   
Dados de categoria e atributos mudam com pouca frequência. O documento do usuário recomenda: "Cache inteligente - Armazenar dados que mudam pouco (categorias, atributos) por mais tempo." O caching destes dados é vital para o desempenho e para reduzir chamadas à API. A obtenção de categorias e atributos é necessária para a criação e atualização de produtos. Estes dados podem ser extensos, mas não mudam diariamente.
F. Gerenciamento de Mídia: Imagens e Vídeos

1. Upload de Imagens de Produtos (/api/v2/media_space/upload_image)
Referência no Documento do Usuário: /api/v2/media_space/upload_image
Confirmação Documental:  (menciona seu uso no fluxo add_item).  inacessível.  é para partes de vídeo.   
Propósito: Fazer upload de arquivos de imagem para o espaço de mídia da Shopee.
Caminho da API: POST /api/v2/media_space/upload_image
Parâmetros da Requisição (): partner_id, timestamp, sign (nota: access_token e shop_id não são listados como parâmetros comuns para este endpoint público específico em , mas geralmente são necessários para mídias relacionadas à loja. O guia  implica o contexto de uma sessão autenticada). image (arquivo, obrigatório, máx 9 imagens, máx 10MB cada, JPG/JPEG/PNG), scene (string, opcional, normal ou desc).   
Campos da Resposta (): response (objeto com image_info_list [array de image_id, image_url_list por região]).   
2. Listando e Gerenciando Ativos de Mídia (/api/v2/media_space/get_media_list)
Referência no Documento do Usuário: /api/v2/media_space/get_media_list
Confirmação Documental:  inacessíveis ou apenas títulos. Documentos como  são para passos de upload de vídeo ou outras APIs não relacionadas, não get_media_list. Este endpoint carece de suporte documental direto nos materiais fornecidos.   
Propósito: Listar arquivos previamente carregados para o espaço de mídia.
Caminho da API: (Assumido GET /api/v2/media_space/get_media_list com base no documento do usuário).
Parâmetros da Requisição (Conceptual): Parâmetros comuns de autenticação, filtros como media_type (imagem/vídeo), paginação (offset, page_size), ordenação.
Campos da Resposta (Conceptual): Lista de itens de mídia com media_id, file_name, url, type, create_time.
3. Fluxo de Trabalho Abrangente de Upload de Vídeo (conforme )   
Passo 1: Iniciar (/api/v2/media_space/init_video_upload) ()   
Requisição: file_md5, file_size.
Resposta: video_upload_id.
Passo 2: Upload de Partes (/api/v2/media_space/upload_video_part) ()   
Requisição: video_upload_id, part_seq, part_content (parte do arquivo), content_md5.
Passo 3: Completar (/api/v2/media_space/complete_video_upload) ()   
Requisição: video_upload_id, part_seq_list.
Passo 4: Obter Resultado (/api/v2/media_space/get_video_upload_result) ()   
Requisição: video_upload_id.
Resposta: status (SUCCEEDED, FAILED), video_info (URLs).
Alternativamente, subscrever ao "Video Upload Push (Code:11)".   
O gerenciamento de mídia, especialmente vídeo, é um processo de múltiplos passos e assíncrono. O documento  descreve claramente um processo de quatro etapas para uploads de vídeo. O documento  introduz o "Video Upload Push (Code:11)" que informa sobre a transcodificação bem-sucedida. Isso sugere duas abordagens: sondar get_video_upload_result ou, mais eficientemente, subscrever à notificação push.   
IV. Implementação Estratégica: Melhores Práticas e Recomendações

Uma implementação bem-sucedida da funcionalidade "Minha Loja" requer não apenas o conhecimento dos endpoints da API, mas também a adoção de práticas estratégicas para garantir desempenho, estabilidade e manutenibilidade.

Adotando uma Abordagem de Implementação Faseada
O documento do usuário recomenda uma abordagem faseada: Fase 1 (Conexão e Informações da Loja), Fase 2 (Gerenciamento de Produtos CRUD), Fase 3 (Métricas) e Fase 4 (Promoções e Recursos Avançados). Esta é uma estratégia sólida.

Justificativa: Permite desenvolvimento, teste e implantação incrementais, reduzindo riscos e entregando valor mais rapidamente. Começar com funcionalidades principais de apenas leitura antes de implementar operações de escrita complexas é uma boa prática. Esta abordagem alinha-se com as melhores práticas gerais de desenvolvimento de software.
Projetando Mecanismos de Cache Eficazes para Desempenho
O documento do usuário sugere: "Cache inteligente - Armazenar dados que mudam pouco (categorias, atributos) por mais tempo."

Porquê Cache? Reduz o volume de chamadas à API, melhora os tempos de resposta para a "Minha Loja", evita atingir limites de taxa e diminui a carga do servidor tanto no cliente quanto no lado da Shopee.   
O que Cachear:
Dados de longa duração e que mudam raramente: Categorias , Atributos. Definir TTLs (Time-To-Live) mais longos. (Recomendação do documento do usuário)   
Dados acedidos frequentemente e que mudam moderadamente: Informações da loja , listas de produtos  se não filtradas intensamente por status em tempo real, detalhes de produtos  para itens populares. Usar TTLs moderados com potencial validação ETag se suportado pela API da Shopee ( discute ETags como uma boa prática geral).   
Dados de sessão específicos do usuário: Tokens de acesso devem ser armazenados e gerenciados de forma segura, não cacheados de forma a comprometer a segurança.
Estratégias (Melhores Práticas Gerais de API de ):   
Usar cabeçalhos de cache apropriados se fornecidos pela API da Shopee (ex: Cache-Control: max-age). Os documentos  (Salesforce OCAPI) e  (guia Speakeasy) detalham isso. Os próprios documentos da API da Shopee (ex: ) não mostram explicitamente que eles enviam cabeçalhos de controle de cache para as suas próprias respostas de API, então o cache do lado do cliente ou proxy baseado na volatilidade dos dados é fundamental.   
Implementar cache do lado do cliente para visualizações específicas do usuário e cache do lado do servidor (ex: Redis, Memcached como mencionado em ) para dados compartilhados entre usuários ou sessões da "Minha Loja".   
Invalidação de cache: Para dados como estoque de produtos ou preço, que podem mudar frequentemente, a duração do cache deve ser menor, ou é necessário um mecanismo para invalidar/atualizar o cache após a atualização.
A natureza dos dados de e-commerce (alguns estáticos, outros dinâmicos) torna o cache inteligente uma necessidade. Categorias e atributos  são dados fundamentais para o gerenciamento de produtos e dificilmente mudam com muita frequência. Cacheá-los com um TTL mais longo (ex: várias horas ou um dia) faz sentido. Dados em tempo real como status de pedidos  ou níveis de estoque atuais para um produto altamente dinâmico podem não ser adequados para cache agressivo ou exigir TTLs muito curtos.   
Compreendendo e Lidando com Limites de Taxa da API (Rate Limits)
O documento do usuário alerta: "Considere limites de taxa - A API da Shopee tem limites de chamadas por minuto que precisam ser respeitados."

Política Oficial: A documentação oficial da Shopee Open Platform deve ser a fonte primária para limites de taxa. O documento  (publicapi.dev) menciona um limite geral de "100 requisições por minuto" para uma "API Shopee", mas isso pode não ser o limite oficial da Open Platform V2 ou pode estar desatualizado/não ser oficial. O documento  (guia Rollout) observa que limites exatos requerem a verificação de documentos oficiais ou suporte, e que os limites podem variar por endpoint ou tipo de conta.   
Melhores Práticas ():   
Monitorizar o uso da API.
Implementar lógica de nova tentativa com recuo exponencial (exponential backoff) para erros de limite de taxa (tipicamente HTTP 429 "Too Many Requests").
Distribuir requisições ao longo do tempo; evitar picos.
Otimizar chamadas de API: buscar apenas dados necessários, usar endpoints de lote se disponíveis e cachear agressivamente.
A falta de números explícitos e detalhados de limite de taxa nos materiais oficiais fornecidos significa que os desenvolvedores devem consultar o Portal do Desenvolvedor Shopee ao vivo ou as respostas da API para cabeçalhos X-RateLimit-*, se fornecidos. Confiar em números de terceiros  é arriscado. Documentos como  incluem o tratamento de erros 429 e a procura por cabeçalhos de limite de taxa nas respostas.   
Tratamento Robusto de Erros e Técnicas de Depuração
As chamadas de API podem falhar por vários motivos: parâmetros inválidos, problemas de autenticação, limites de taxa, erros de servidor.

Códigos de Erro Comuns (de vários documentos como ):   
Erros de autenticação: error_auth (Token de acesso inválido, ID de parceiro inválido, Assinatura errada, Sem permissão).
Erros de parâmetro: error_param (Campo obrigatório ausente, Valor/formato inválido).
Erros de não encontrado: common.error_not_found, error_item_not_found.
Erros de servidor: error_server, error_inner, error_system_busy.
Erros específicos de lógica de negócios (ex: discount.discount_period_too_long, error_cannt_edit_price_in_promotion).
Estratégias:
Verificar os campos error e message na resposta da API.
Registar request_id para solução de problemas com o suporte da Shopee (documentos como  mostram consistentemente request_id nas respostas).   
Implementar tratamento específico para erros repetíveis (ex: limites de taxa, problemas temporários de servidor) vs. erros não repetíveis (ex: parâmetros inválidos, falha de autenticação).
Usar a "Ferramenta de Log da Open Platform" da Shopee  se disponível e aplicável para depuração.   
O request_id retornado em cada resposta da API é uma informação crítica para depuração. Quase todos os exemplos de resposta da API nos documentos oficiais incluem um campo request_id. Este campo é consistentemente descrito como "O identificador para uma requisição de API para rastreamento de erros" ou similar.
Aproveitando SDKs Oficiais e da Comunidade Shopee

SDKs Oficiais: O documento do usuário menciona "Exemplos oficiais para várias linguagens" no GitHub da Shopee. Embora links diretos para SDKs oficiais para todas as linguagens não estejam nos materiais, a existência é implícita. O documento  aponta para um SDK Go (github.com/revell29/go-shopee-sdk/shopee), mas seu status oficial não é confirmado por outros materiais.   
SDKs da Comunidade (Identificados nos Materiais):
PHP:
mu-hanz/shoapi : Específico para Laravel, suporta API V2, cobre muitos módulos.   
raviMukti/shopee-api-client (Haistar/ShopeePhpSdk) : Outro SDK PHP.   
EcomPHP/shopee-php : Cliente PHP geral.   
Python:
JimCurryWang/python-shopee (pyshopee) : Suporta API V2 (Client20).   
Guia rollout.com : Fornece um tutorial para construir um cliente Python.   
Node.js:
MonveChen/shopee-openapi-v2 : SDK para Shopee Open API v2.   
aqualaguna/shopee-client : Cliente Node.js usando TypeScript.   
Java:
OpenAPITools/openapi-generator : Pode gerar cliente Java a partir da especificação OpenAPI.   
chrisopal/shopee4j : SDK Java para Shopee.   
Benefícios: SDKs podem simplificar o desenvolvimento ao lidar com autenticação, assinatura de requisições e fornecer métodos convenientes para chamadas de API. O documento  menciona que o pyshopee lida com autenticação e timestamps automaticamente.   
A disponibilidade de múltiplos SDKs da comunidade indica um ecossistema de desenvolvedores ativo. No entanto, seu status de manutenção, completude e aderência às melhores práticas da V2 devem ser cuidadosamente avaliados. SDKs oficiais, se disponíveis e bem mantidos, são geralmente preferidos.
V. Navegando no Ecossistema de Desenvolvedores da Shopee

Para uma integração bem-sucedida, é essencial que os desenvolvedores saibam onde encontrar informações precisas, ferramentas e suporte.

O Portal do Desenvolvedor Shopee: Seu Principal Recurso
O documento do usuário indica: "Portal de Desenvolvedores da Shopee - Acesso principal à documentação URL: https://open.shopee.com/documents"

Confirmação Documental: Esta URL é consistentemente referenciada na parte inferior das páginas de documentação oficial (ex: ).   
O portal contém o Guia do Desenvolvedor, Referência da API, detalhes do Mecanismo de Push e Política de Proteção de Dados.   
Acessando Referência da API e Documentação Interativa

Referência Oficial da API: Disponível no Portal do Desenvolvedor. Esta é a fonte canônica para detalhes de endpoints.   
Especificação Swagger/OpenAPI:
O documento do usuário menciona: "Swagger da API Shopee - Documentação interativa Disponível no Portal de Desenvolvedores."
Confirmação Documental: Embora links diretos para um swagger.json ou openapi.yaml para todo o conjunto de APIs V2 da Shopee não sejam explicitamente fornecidos nos materiais, a plataforma Shopee usa OpenAPI V2.0. Páginas de documentação da API (ex: ) frequentemente incluem exemplos de requisição/resposta que são característicos de apresentações do tipo Swagger UI. A documentação interativa mencionada no documento do usuário é provavelmente gerada a partir de tal especificação e hospedada em seu portal.   
Coleções Postman:
TMAPI E-commerce APIs (): Fornece uma coleção Postman para a API Shopee, mas parece ser através de um agregador de terceiros (tmapi.top) e pode não ser a coleção oficial da Shopee Open Platform V2. Requer um apiToken da TMAPI.   
Shopee-analyzer no Postman (): Outro espaço de trabalho público no Postman relacionado à "shopee", mas seu status oficial ou relevância direta para a Open API V2 não é claro.   
Os desenvolvedores devem priorizar a documentação interativa oficial no Portal do Desenvolvedor Shopee. O documento do usuário menciona "Swagger da API Shopee - Documentação interativa Disponível no Portal de Desenvolvedores." Isso implica fortemente que a Shopee fornece sua própria documentação interativa de API.
Explorando Repositórios GitHub Oficiais e da Comunidade
O documento do usuário indica: "GitHub da Shopee - Exemplos de código e SDKs Exemplos oficiais para várias linguagens."

Confirmação Documental:
Oficial: A URL exata para a organização GitHub oficial da Shopee para SDKs da Open API não é explicitamente definida nos materiais, mas sua existência é declarada.
SDKs da Comunidade: Conforme listado na seção IV.E (ex: mu-hanz/shoapi, JimCurryWang/python-shopee). Documentos como  são exemplos.   
VI. Conclusão

A implementação da funcionalidade "Minha Loja" utilizando a API v2 da Shopee Open Platform é um projeto substancial que oferece um valor significativo aos vendedores, centralizando o gerenciamento de suas operações. Uma integração bem-sucedida depende de uma compreensão clara dos mecanismos de autenticação, das capacidades dos diversos módulos da API e da adesão às melhores práticas de desenvolvimento.

Principais Pontos para uma Integração Bem-sucedida da "Minha Loja"

Autenticação Robusta: Priorizar a compreensão e a implementação correta do fluxo de autenticação e autorização da API v2, incluindo a geração de assinaturas e o gerenciamento de tokens de acesso e atualização.
Mapeamento Detalhado: Mapear completamente as funcionalidades da "Minha Loja" para os endpoints correspondentes da API v2 da Shopee, garantindo que todos os requisitos de dados sejam atendidos.
Tratamento de Erros e Limites: Implementar um tratamento de erros abrangente, registando o request_id para facilitar a depuração, e respeitar os limites de taxa da API para evitar interrupções de serviço.
Cache Inteligente: Empregar estratégias de cache inteligentes, especialmente para dados estáticos ou semi-estáticos como categorias e atributos, para otimizar o desempenho e reduzir a carga na API.
Recomendações Finais

Fonte Primária: Sempre consultar o Portal do Desenvolvedor Shopee oficial (https://open.shopee.com/documents) como a principal fonte de verdade para a documentação da API V2. A informação contida neste portal é a mais atualizada e precisa.
Abordagem Faseada: Iniciar o desenvolvimento com uma abordagem faseada, concentrando-se primeiro nas funcionalidades principais e de leitura, antes de passar para operações de escrita e funcionalidades mais complexas.
Avaliação de SDKs: Avaliar cuidadosamente os SDKs oficiais versus os da comunidade com base nas necessidades do projeto, na maturidade e manutenção do SDK. SDKs podem acelerar o desenvolvimento, mas a devida diligência é crucial.
Testes Exaustivos: Alocar tempo suficiente para testes completos no ambiente sandbox da Shopee antes de implantar a funcionalidade "Minha Loja" em produção. Isso ajudará a identificar e corrigir problemas antecipadamente.
Ao seguir estas diretrizes e utilizar os recursos fornecidos pela Shopee Open Platform, os desenvolvedores estarão bem equipados para construir uma integração "Minha Loja" eficaz e robusta, aprimorando a experiência dos vendedores no CIP Shopee.

