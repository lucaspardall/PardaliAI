# Guia de Implementa√ß√£o - Corre√ß√µes API Shopee

## üö® Prioridade das Corre√ß√µes

### 1. CR√çTICO - Corre√ß√£o Imediata (Impede funcionamento)
- **Headers j√° enviados** - Webhook retorna erro 500
- **Valida√ß√£o de assinatura** - Todos webhooks s√£o rejeitados

### 2. ALTO - Corre√ß√£o Urgente (Funcionalidade comprometida)  
- **Shop ID n√£o extra√≠do** - Eventos n√£o s√£o processados
- **Handlers n√£o implementados** - Eventos s√£o ignorados

### 3. M√âDIO - Corre√ß√£o Importante (Melhoria necess√°ria)
- **Configura√ß√£o hardcoded** - Risco de seguran√ßa
- **Rate limiting ausente** - Risco de bloqueio pela Shopee
- **Client com falhas** - Tokens expiram sem renova√ß√£o

### 4. BAIXO - Melhorias (Qualidade)
- **Logs excessivos** - Performance e seguran√ßa
- **Error handling** - Melhor diagn√≥stico

## üìã Passo a Passo da Implementa√ß√£o

### Passo 1: Configurar Vari√°veis de Ambiente

Adicione ao seu `.env`:

```env
# Credenciais Shopee
SHOPEE_PARTNER_ID=seu_partner_id_aqui
SHOPEE_PARTNER_KEY=sua_partner_key_aqui
SHOPEE_PUSH_PARTNER_KEY=sua_push_partner_key_aqui
SHOPEE_REDIRECT_URL=https://seu-dominio.com/api/shopee/callback
SHOPEE_REGION=BR

# Ambiente
NODE_ENV=production

# Redis (para rate limiting)
REDIS_URL=redis://localhost:6379
```

‚ö†Ô∏è **IMPORTANTE**: A `SHOPEE_PUSH_PARTNER_KEY` √© diferente da `SHOPEE_PARTNER_KEY`. Voc√™ precisa obter ambas no painel da Shopee.

### Passo 2: Instalar Depend√™ncias

```bash
npm install express-rate-limit rate-limit-redis node-cache winston
npm install --save-dev @types/node-cache
```

### Passo 3: Aplicar Corre√ß√µes Cr√≠ticas

#### A. Corrigir Webhook (Headers Duplos)

1. Abra `server/routes/shopee.ts`
2. Substitua o endpoint `/webhook` pelo c√≥digo fornecido
3. Teste com curl:

```bash
curl -X POST http://localhost:3000/api/shopee/webhook \
  -H "Content-Type: application/json" \
  -d '{"code":0,"timestamp":1234567890}'
```

#### B. Corrigir Valida√ß√£o de Assinatura

1. Abra `server/shopee/webhooks.ts`
2. Substitua a fun√ß√£o `validateWebhookSignature`
3. Verifique se est√° usando `SHOPEE_PUSH_PARTNER_KEY`

### Passo 4: Aplicar Corre√ß√µes de Alta Prioridade

#### A. Corrigir Extra√ß√£o do Shop ID

1. Substitua `processShopeeWebhookEvent` com o novo c√≥digo
2. Adicione a fun√ß√£o `extractShopIdFromExtra`

#### B. Implementar Handlers

1. Adicione as fun√ß√µes de handler para cada tipo de evento
2. Implemente `updateStoreStatus` no seu banco de dados

### Passo 5: Configurar Rate Limiting

1. Crie `server/middleware/rateLimiter.ts`
2. Aplique nos routes:

```typescript
// server/routes/shopee.ts
import { shopeeApiLimiter, webhookLimiter } from '../middleware/rateLimiter';

// Para webhooks
router.post('/webhook', webhookLimiter, async (req, res) => {
  // ...
});

// Para API calls
router.use('/api/*', shopeeApiLimiter);
```

### Passo 6: Melhorar Sistema de Logs

1. Crie `server/utils/logger.ts`
2. Substitua todos `console.log` por `logger.info`
3. Configure logs estruturados para produ√ß√£o

### Passo 7: Testes de Valida√ß√£o

#### Teste 1: Webhook de Teste
```bash
# Gere assinatura correta e teste
node scripts/test-webhook.js
```

#### Teste 2: Autoriza√ß√£o de Loja
Simule um evento de autoriza√ß√£o e verifique se:
- Shop ID √© extra√≠do corretamente
- Status √© atualizado no banco
- Sincroniza√ß√£o √© agendada

#### Teste 3: Rate Limiting
Execute m√∫ltiplas requisi√ß√µes e verifique se o limite √© respeitado

## üîç Monitoramento P√≥s-Implementa√ß√£o

### M√©tricas para Acompanhar

1. **Taxa de Sucesso de Webhooks**
   - Meta: >99%
   - Alerta se <95%

2. **Tempo de Resposta do Webhook**
   - Meta: <200ms
   - Alerta se >500ms

3. **Taxa de Erro de Assinatura**
   - Meta: 0%
   - Qualquer erro deve ser investigado

4. **Rate Limit Hits**
   - Monitorar quantas vezes o limite √© atingido
   - Ajustar se necess√°rio

### Logs para Monitorar

```typescript
// Adicione estes logs para debugging
logger.info('webhook_received', {
  code: eventData.code,
  shopId: shopId,
  timestamp: new Date().toISOString(),
  signatureValid: isValid
});

logger.info('webhook_processed', {
  code: eventData.code,
  shopId: shopId,
  duration: Date.now() - startTime,
  success: true
});
```

## üöÄ Checklist de Deploy

- [ ] Vari√°veis de ambiente configuradas
- [ ] Redis configurado para rate limiting
- [ ] Logs estruturados ativados
- [ ] Webhook testado com assinatura v√°lida
- [ ] Handlers implementados para eventos principais
- [ ] Rate limiting testado
- [ ] Monitoramento configurado
- [ ] Backup do c√≥digo anterior realizado

## üìä Resultado Esperado

Ap√≥s implementar todas as corre√ß√µes:

- ‚úÖ Taxa de sucesso de webhooks: ~100%
- ‚úÖ Assinaturas validadas corretamente
- ‚úÖ Shop ID sempre extra√≠do
- ‚úÖ Eventos processados adequadamente
- ‚úÖ Sistema protegido contra rate limit
- ‚úÖ Logs apropriados para produ√ß√£o
- ‚úÖ Errors tratados sem expor informa√ß√µes sens√≠veis

## üÜò Troubleshooting

### Problema: Assinatura ainda inv√°lida
1. Verifique se est√° usando `SHOPEE_PUSH_PARTNER_KEY` (n√£o a API key)
2. Confirme o formato exato da URL (sem porta, com protocolo)
3. Teste com a ferramenta de debug da Shopee

### Problema: Shop ID ainda undefined
1. Fa√ßa log do payload completo do webhook
2. Verifique todas as poss√≠veis localiza√ß√µes do shop_id
3. Implemente extra√ß√£o do campo `extra` como fallback

### Problema: Rate limit muito restritivo
1. Ajuste os valores baseado no seu volume
2. Considere implementar queue para processar em lote
3. Use Redis para compartilhar limite entre inst√¢ncias