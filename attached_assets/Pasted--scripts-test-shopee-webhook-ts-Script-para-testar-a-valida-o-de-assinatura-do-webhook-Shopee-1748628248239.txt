// scripts/test-shopee-webhook.ts
// Script para testar a valida√ß√£o de assinatura do webhook Shopee

import crypto from 'crypto';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

interface WebhookTestConfig {
  webhookUrl: string;
  pushPartnerKey: string;
  testPayloads: any[];
}

class ShopeeWebhookTester {
  private config: WebhookTestConfig;

  constructor() {
    this.config = {
      webhookUrl: process.env.SHOPEE_WEBHOOK_URL || 'http://localhost:3000/api/shopee/webhook',
      pushPartnerKey: process.env.SHOPEE_PUSH_PARTNER_KEY || '',
      testPayloads: [
        {
          // Teste 1: Webhook de teste
          code: 0,
          timestamp: Math.floor(Date.now() / 1000)
        },
        {
          // Teste 2: Autoriza√ß√£o de loja
          code: 1,
          data: {
            authorize_type: "shop authorization by user",
            extra: "shop id 404065079 (BR) has been authorized successfully",
            shop_id: 404065079,
            success: 1
          },
          timestamp: Math.floor(Date.now() / 1000)
        },
        {
          // Teste 3: Atualiza√ß√£o de pedido
          code: 4,
          data: {
            ordersn: "2501234567890",
            status: "READY_TO_SHIP",
            update_time: Math.floor(Date.now() / 1000),
            shop_id: 404065079
          },
          timestamp: Math.floor(Date.now() / 1000)
        }
      ]
    };
  }

  // Gera assinatura correta para o webhook
  generateSignature(url: string, body: any): string {
    // Remove query string e porta da URL
    const cleanUrl = url.split('?')[0].replace(/:(\d+)/, '');
    
    // Serializa o body com keys ordenadas
    const bodyString = JSON.stringify(body, Object.keys(body).sort());
    
    // Cria string base
    const baseString = `${cleanUrl}|${bodyString}`;
    
    // Gera HMAC-SHA256
    const signature = crypto
      .createHmac('sha256', this.config.pushPartnerKey)
      .update(baseString)
      .digest('hex');
    
    console.log('üìù Detalhes da assinatura:');
    console.log('   URL:', cleanUrl);
    console.log('   Body length:', bodyString.length);
    console.log('   Base string length:', baseString.length);
    console.log('   Signature:', signature.substring(0, 20) + '...');
    
    return signature;
  }

  // Envia webhook de teste
  async sendTestWebhook(payload: any, testName: string): Promise<void> {
    console.log(`\nüß™ Teste: ${testName}`);
    console.log('‚îÅ'.repeat(50));
    
    try {
      const signature = this.generateSignature(this.config.webhookUrl, payload);
      
      console.log('üì§ Enviando webhook...');
      const startTime = Date.now();
      
      const response = await axios.post(this.config.webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': signature
        },
        validateStatus: () => true // Aceita qualquer status
      });
      
      const duration = Date.now() - startTime;
      
      console.log(`üì• Resposta recebida em ${duration}ms`);
      console.log('   Status:', response.status);
      console.log('   Headers:', response.headers);
      console.log('   Body:', response.data);
      
      // Valida√ß√£o dos resultados
      if (response.status === 200) {
        console.log('‚úÖ Webhook aceito com sucesso!');
      } else if (response.status === 401) {
        console.log('‚ùå Falha na autentica√ß√£o - verifique a SHOPEE_PUSH_PARTNER_KEY');
      } else if (response.status === 500) {
        console.log('‚ùå Erro no servidor - verifique os logs');
      } else {
        console.log('‚ö†Ô∏è  Status inesperado:', response.status);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao enviar webhook:', error);
    }
  }

  // Testa extra√ß√£o de shop_id
  testShopIdExtraction(): void {
    console.log('\nüîç Testando extra√ß√£o de Shop ID');
    console.log('‚îÅ'.repeat(50));
    
    const testCases = [
      {
        name: 'Shop ID no data',
        payload: { data: { shop_id: 123456 } },
        expected: 123456
      },
      {
        name: 'Shop ID no extra',
        payload: { data: { extra: 'shop id 789012 (BR) authorized' } },
        expected: 789012
      },
      {
        name: 'Shop ID no root',
        payload: { shop_id: 345678 },
        expected: 345678
      }
    ];
    
    testCases.forEach(test => {
      const shopId = this.extractShopId(test.payload);
      const passed = shopId === test.expected;
      console.log(`${passed ? '‚úÖ' : '‚ùå'} ${test.name}: ${shopId} (esperado: ${test.expected})`);
    });
  }

  // Simula extra√ß√£o de shop_id
  extractShopId(payload: any): number | undefined {
    // Implementa√ß√£o similar √† do webhook
    const shopId = payload.data?.shop_id || 
                   payload.data?.shopid || 
                   payload.shop_id || 
                   payload.shopid ||
                   this.extractFromExtra(payload.data?.extra);
    return shopId;
  }

  extractFromExtra(extra?: string): number | undefined {
    if (!extra) return undefined;
    const match = extra.match(/shop id (\d+)/i);
    return match ? parseInt(match[1], 10) : undefined;
  }

  // Executa todos os testes
  async runAllTests(): Promise<void> {
    console.log('üöÄ Iniciando testes de webhook Shopee');
    console.log('‚ïê'.repeat(50));
    
    // Valida√ß√£o de configura√ß√£o
    if (!this.config.pushPartnerKey) {
      console.error('‚ùå SHOPEE_PUSH_PARTNER_KEY n√£o configurada!');
      console.log('   Configure no .env ou passe como vari√°vel de ambiente');
      return;
    }
    
    console.log('üìã Configura√ß√£o:');
    console.log('   Webhook URL:', this.config.webhookUrl);
    console.log('   Push Partner Key:', this.config.pushPartnerKey.substring(0, 10) + '...');
    
    // Teste 1: Webhook de teste
    await this.sendTestWebhook(
      this.config.testPayloads[0],
      'Webhook de Teste (code: 0)'
    );
    
    // Teste 2: Autoriza√ß√£o de loja
    await this.sendTestWebhook(
      this.config.testPayloads[1],
      'Autoriza√ß√£o de Loja (code: 1)'
    );
    
    // Teste 3: Atualiza√ß√£o de pedido
    await this.sendTestWebhook(
      this.config.testPayloads[2],
      'Atualiza√ß√£o de Pedido (code: 4)'
    );
    
    // Teste 4: Extra√ß√£o de shop_id
    this.testShopIdExtraction();
    
    console.log('\n‚úÖ Testes conclu√≠dos!');
    console.log('‚ïê'.repeat(50));
  }

  // Modo debug - mostra detalhes da assinatura
  async debugSignature(): Promise<void> {
    console.log('\nüîß Modo Debug - Detalhes da Assinatura');
    console.log('‚îÅ'.repeat(50));
    
    const testPayload = {
      code: 0,
      timestamp: 1748520470
    };
    
    const url = this.config.webhookUrl;
    const cleanUrl = url.split('?')[0].replace(/:(\d+)/, '');
    const bodyString = JSON.stringify(testPayload, Object.keys(testPayload).sort());
    const baseString = `${cleanUrl}|${bodyString}`;
    
    console.log('URL Original:', url);
    console.log('URL Limpa:', cleanUrl);
    console.log('Body:', bodyString);
    console.log('Base String:', baseString);
    console.log('Base String (hex):', Buffer.from(baseString).toString('hex'));
    
    const signature = crypto
      .createHmac('sha256', this.config.pushPartnerKey)
      .update(baseString)
      .digest('hex');
    
    console.log('Signature:', signature);
    console.log('\nCURL para teste manual:');
    console.log(`curl -X POST "${url}" \\
  -H "Content-Type: application/json" \\
  -H "Authorization: ${signature}" \\
  -d '${bodyString}'`);
  }
}

// Execu√ß√£o do script
async function main() {
  const tester = new ShopeeWebhookTester();
  
  const args = process.argv.slice(2);
  
  if (args.includes('--debug')) {
    await tester.debugSignature();
  } else {
    await tester.runAllTests();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

export { ShopeeWebhookTester };

/* 
  USO:
  
  1. Executar todos os testes:
     npm run test:webhook
     
  2. Modo debug (mostra detalhes da assinatura):
     npm run test:webhook -- --debug
     
  3. Com vari√°veis de ambiente customizadas:
     SHOPEE_WEBHOOK_URL=https://cipshopee.replit.app/api/shopee/webhook npm run test:webhook
     
  Adicione ao package.json:
  "scripts": {
    "test:webhook": "ts-node scripts/test-shopee-webhook.ts"
  }
*/