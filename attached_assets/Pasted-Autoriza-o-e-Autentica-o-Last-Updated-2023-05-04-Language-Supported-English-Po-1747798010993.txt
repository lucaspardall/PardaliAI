Autorização e Autenticação
Last Updated: 2023-05-04
Language Supported: English / 简体中文 / 繁體中文 / Português
A autorização é um passo importante para usar a Open API. Você precisa ser autorizado pelo vendedor para que seu app se comunique com as APIs não-públicas necessárias para a gestão da loja.



Você precisa ser autenticado com base nos parâmetros públicos passados à Open API. Se a autenticação falhar, sua chamada vai falhar e um erro será informado.

⚠️ Nota
Cada autorização é válida por 365 dias. Depois que a autorização expirar, você precisa entrar em contato com o vendedor para que ele conceda a autorização do App novamente.
Se uma loja primária com Session Initiation Protocol (SIP) conceder autorização para um app, todas as lojas afiliadas com SIP receberão a autorização para o App automaticamente. No entanto, as lojas afiliadas terão permissões de chamada de API limitadas.
Processo de Autorização


Existem 4 passos para a concluir sua autorização: Gerar o link de autorização, adquirir autorização da loja, usar o código de autorização, e obter e atualizar o token de acesso.



Esses passos serão explicados em detalhe abaixo, junto com informações sobre o que preparar antes da autorização, detalhes do processo, e como usar a informação depois da autorização para passar na autenticação da plataforma.

Gerando o link de autorização
Para Seller in House System App (vendedor que administra seus próprios aplicativos), você pode logar na Open Platform> App list> clicar em Authorize> preencher a URL de redirecionamento para gerar um link de autorização.




Para outros tipos de App, você precisa criar um link com as seguintes especificações. O link de autorização é composto de uma URL fixa e outros parâmetros necessários.

URL de autorização fixa:

Ambiente de produção：

https://partner.shopeemobile.com/api/v2/shop/auth_partner



Ambiente de teste sandbox:

https://partner.test-stable.shopeemobile.com/api/v2/shop/auth_partner



Outros parâmetros necessários:

Parameter name	Type	Description
sign	string	A assinatura obtida pelo hashing HMAC-SHA256 da string (ordem: partner_id, api path, timestamp) com o partner_key.
partner_id	int	partner_id obtido do App.
timestamp	int	Deve ser o mesmo que o timestamp usado na string base do sign. O timestamp só é válido por 5 minutos.
redirect	string	A URL em que a página será redirecionada depois da conclusão da autorização. Pode ser qualquer URL, como o site oficial da empresa.
Calculando o parâmetro sign

O parâmetro sign não é só componente do link de autorização, mas também um parâmetro usado na autenticação cada vez que a API for chamada. Essa seção explica como criar a  sign base string e calcular a assinatura de autenticação pelo HMAC-SHA256.



Criando uma sign base string

Existem 3 tipos de APIs que requerem o uso de parâmetros distintos para criar o sign base string. (consistente com os seus parâmetros comuns).



Você precisa concatenar o path da API (sem host) e os parâmetros comuns abaixo em uma única sign base string na seguinte ordem:



Para Shop APIs: partner_id, api path, timestamp, access_token, shop_id
Para Merchant APIs: partner_id, api path, timestamp, access_token, merchant_id
Para Public APIs: partner_id, api path, timestamp


Calculando a assinatura de autenticação

Utilize o algoritmo HMAC-SHA256 para fazer o hash da string de base do sign, e use o partner test_key como chave de criptografia. O valor hexadecimal em letras minúsculas do hash é a assinatura de autenticação.



Python Code Demo:

Python
import hmac
import json
import time
import requests
import hashlib


def shop_auth():
    timest = int(time.time())
    host = "https://partner.shopeemobile.com"
    path = "/api/v2/shop/auth_partner"
    redirect_url = "https://www.baidu.com/"
    partner_id = 80001
    tmp = "test...."
    partner_key = tmp.encode()
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    ##generate api
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s&redirect=%s" % (partner_id, timest, sign, redirect_url)
    print(url)


Go Code Demo:

Go
func auth_shop(){
	timest := strconv.FormatInt(time.Now().Unix(),10)
	host := "https://partner.test.shopeemobile.com"
	path := "/api/v2/shop/auth_partner"
	redirectUrl := "https://www.baidu.com/"
	partnerId := strconv.Itoa(2006566)
	partnerKey := "1391fd986fe8ec7569bebed75b0c33ee35eb5a305bed7038657a5cd5f75b1c88"
	baseString := fmt.Sprintf("%s%s%s", partnerId,path,timest)
	h := hmac.New(sha256.New,[]byte(partnerKey))
	h.Write([]byte(baseString))
	sign := hex.EncodeToString(h.Sum(nil))
	url := fmt.Sprintf(host+path+"?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", partnerId,timest,sign, redirectUrl)
	fmt.Println(url)
}


Java Code Demo:

Java
    //generate auth url
    public static void shop_auth(){
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/shop/auth_partner";
        String redirect_url = "https://www.baidu.com/";
        long partner_id = 123456L;
        String tmp_partner_key = "...";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        String sign = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = String.format("%064x",new BigInteger(1,mac.doFinal(base_string)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", partner_id,timest, sign, redirect_url);
        System.out.println(url);
    }


PHP Code Demo:

PHP
<?php 


function authShop($partnerId, $partnerKey) {   
    global $host;
    $path = "/api/v2/shop/auth_partner";
    $redirectUrl = "https://www.baidu.com/";

    $timest = time();
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", $host, $path, $partnerId, $timest, $sign, $redirectUrl);
    return $url;
}

$host="https://partner.shopeemobile.com";

$partnerId = 847892;
$partnerKey = "57615053704d6470644f554a78656d50484143644964436a5568777544524579";

echo authShop($partnerId, $partnerKey);
?>


Exemplos de links de autorização:

Aqui temos alguns exemplos de links de autorização nos ambientes de produção e sandbox.

Ambiente de Produção:

https://partner.shopeemobile.com/api/v2/shop/auth_partner?partner_id=10090&redirect=https://open.shopee.com&timestamp=1594897040&sign=90c12d3932f3826f0c72242e1ec6492eec9a1298658f41f7a9469664801c4e5a



Ambiente de Teste/sandbox:

https://partner.test-stable.shopeemobile.com/api/v2/shop/auth_partner?partner_id=1000016&redirect=https://open.shopee.com&timestamp=1657254106&sign=47e8712bb89dbc7c7f71eb690310d089b951801cb104763981de5b3dacc3f07c

⚠️ NotaO timestamp usado para calcular o sign só é válido por 5 minutos, Depois disso, o link de autorização não vai mais ser válido, você vai precisar gerar um novo link.
Conseguindo autorizações da loja(s)


Depois de compartilhar o link de autorização com o vendedor, ele vai precisar entrar na conta dele, preencher o código de verificação enviado para seu celular, e entrar na página de autorização.



O vendedor pode usar a conta da loja para autorizar uma única loja ou a conta principal para autorizar diversas lojas/vendedores. Sub-contas não podem ser usadas para entrar na página de autorização.

⚠️ NotaAplicativos do tipo Seller In-House System só podem ser autorizados a acessar dados da própria loja do vendedor. Você também precisa fazer login na conta de desenvolvedor
Autorizando com uma conta de loja


1. O vendedor preenche as informações e faz Log In.




2. O vendedor preenche o código de verificação enviado para o celular e seleciona Verify.




3. Depois do login, o vendedor seleciona Confirm Authorization.




4. Depois da autorização, o front-end vai ser direcionado para a URL de redirecionamento no seu link de autorização:

https://open.shopee.com/?code=xxxxxxxxxx&shop_id=xxxxxx

Autorizando com a conta principal


1. Para fazer login na conta principal, o vendedor seleciona Trocar para Sub-conta na página de login.




2. O vendedor preenche as informações e faz o Log In.




3. O vendedor seleciona as lojas que precisam ser autorizadas. Se você precisar acessar uma API de vendedor, por favor, lembre ao vendedor para selecionar a opção Auth Merchant.




4. O vendedor seleciona Confirmar Autorização depois de selecionar.






5. Depois da autorização, o front-end vai ser direcionado para a URL de redirecionamento no seu link de autorização:

https://open.shopee.com/?code=xxxxxx&main_account_id=xxxxxx

Utilizando o código de autorização
Depois que o vendedor der autorização, a Open Platform vai enviar o código de autorização para a URL de redirecionamento. Você pode usar o código para conseguir o access_token.



Se a autorização foi feita com uma conta de loja. Um código e o shop_id serão enviados para a URL.

Se a autorização foi feita com a conta principal, um código e o main_account-id serão enviados para a URL.

Nome do Parâmetro	Tipo	Descrição
code	string	Retornado quando a chamada foi efetuada com sucesso. Esse código é usado para obter o access_token e o refresh_token. Ele é válido apenas uma vez e expira em 10 minutos.
shop_id	int	O ID da loja que abriu a autorização para o seu App. Retornado após a autorização feita em uma conta da loja.
main_account_id	int	O ID da conta principal que abriu a autorização para sua loja. Retornado após a autorização feita em uma conta principal.
Obtendo e atualizando o access_token


O access_token é um token dinâmico que você precisa enviar para chamadas de APIs não públicas. Cada token é válido por 4 horas e pode ser usado diversas vezes. No entanto, você precisa atualizar o token fazendo uma chamada de RefreshAcessToken antes que ele expire para conseguir um novo token de acesso.



O refresh_token é um parâmetro usado para atualizar o access_token. Cada refresh_token é válido por 30 dias.

⚠️ NotaO access_token e o refresh_token de cada shop_id e merchant_id precisam ser salvos separadamente
GetAccesstoken


Depois da autorização, use o código e a shop_id ou main_account_id na URL para fazer uma chamada para essa API. Isso permite que você tenha acesso ao shop_id, merchant_id, access_token e refresh_token.



Path:

Ambiente de produção: https://partner.shopeemobile.com/api/v2/auth/token/get

Ambiente de teste/Sandbox: https://partner.test-stable.shopeemobile.com/api/v2/auth/token/get 





Método de solicitação: POST



Common parameters:

Nome do Parâmetro	Tipo	Mandatório	Descrição
sign	string	True	Assinatura obtida pelo hashing HMAC-SHA256 da sign base string (ordem: partner_id, api path, timestamp) com o partner_key.
partner_id	int	True	O partner_id obtido do app. Esse  partner_id é inserido na consulta.
timestamp	int	True	Timestamp, válido por 5 minutos.


Request parameters:

Nome do Parâmetro	Tipo	Mandatório	Descrição
code	string	True	O código na URL de redirecionamento depois da autorização. Válido apenas uma vez e expira em 10 minutos.
partner_id	int	True	O partner_id obtido do app. Esse  partner_id é inserido no corpo da solicitação.
shop_id	int	
True, inserirapenas1	Com o shop_id autorizado, você pode selecionar o shop_id ou o main_account_id como parâmetros.
main_account_id	int	Com o main_account_id  autorizado, você pode selecionar o shop_id ou o main_account_id como parâmetros.


Response parameters:

Nome do Parâmetro	Tipo	Descrição
request_id	string	ID das solicitações da API requests; sempre retornada. Usada para diagnosticar problemas.
error	string	Códigos de erro em solicitações da API: sempre retornado.Quando a chamada é bem-sucedida, o código de erro é devolvido em branco.
refresh_token	string	Retornado quando a chamada da API é bem-sucedida.Use o refresh_token para conseguir um novo access_token. Válido para cada shop_id e merchant_id respectivamente por 30 dias.
access_token	string	Retornado quando a chamada da API é bem-sucedida.Um código dinâmico que pode ser usado diversas vezes e expira em 4 horas.
expire_in	int	Retornado quando a chamada da API é bem-sucedida.O período de validade do access_token, em segundos.
message	string	Sempre retornado. Possui informações detalhadas de erros
merchant_id_list	int[ ]	Retornado quando existe um main_account_id nos parâmetros inseridos, todos os the merchant_ids autorizados sob a conta principal.
shop_id_list	int[ ]	Retornado quando existe um shop_id nos parâmetros inseridos, todos os the shop_id autorizados.


Python Code Demo:

Python
print(shop_auth())
# first time request token
def get_token_shop_level(code, partner_id, tmp_partner_key, shop_id):
    timest = int(time.time())
    host = "https://partner.shopeemobile.com"
    path = "/api/v2/auth/token/get"
    body = {"code": code, "shop_id": shop_id, "partner_id": partner_id}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)
    # print(url)
    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token


def get_token_account_level(code, partner_id, tmp_partner_key, main_account_id):
    timest = int(time.time())
    host = "https://partner.test.shopeemobile.com"
    path = "/api/v2/auth/token/get"
    body = {"code": code, "main_account_id": main_account_id, "partner_id": partner_id}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)

    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token


Java Code Demo:

Java
import com.alibaba.fastjson.JSONObject;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.HashMap;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;
import com.alibaba.fastjson.JSON;


public class shop_auth {
    public static void main(String[] args) throws ParseException, IOException {
        shop_auth();
        //get_token_shop_level(code,partner_id,partner_key,shop_id);
    }
    //generate auth url
    public static void shop_auth(){
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/shop/auth_partner";
        String redirect_url = "https://www.baidu.com/";
        long partner_id = 123456L;
        String tmp_partner_key = "...";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        String sign = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = String.format("%064x",new BigInteger(1,mac.doFinal(base_string)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", partner_id,timest, sign, redirect_url);
        System.out.println(url);
    }

    //shop request for access token for the first time
    public static String[] get_token_shop_level(String code,long partner_id,String tmp_partner_key,long shop_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/auth/token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("code",code);
            map.put("shop_id",shop_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }

    //main account request for the access token for the first time
    public static String[] get_token_account_level(String code,long partner_id,String tmp_partner_key,long main_account_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.test.shopeemobile.com";
        String path = "/api/v2/auth/token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("code",code);
            map.put("main_account_id",main_account_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }


PHP Code Demo:

PHP
<?php 

function getTokenShopLevel($code, $partnerId, $partnerKey, $shopId) {
    global $host;
    $path = "/api/v2/auth/token/get";
    
    $timest = time();
    $body = array("code" => $code,  "shop_id" => $shopId, "partner_id" => $partnerId);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);
    

    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $resp = curl_exec($c);
    echo "raw result: $resp";

    $ret = json_decode($resp, true);
    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: $accessToken, refresh_token: $newRefreshToken raw: $ret"."\n";
    return $ret;
}


function getTokenAccountLevel($code, $partnerId, $partnerKey, $mainAccountId) {
    global $host;
    $path = "/api/v2/auth/token/get";
    
    $timest = time();
    $body = array("code" => $code,  "main_account_id" => $mainAccountId, "partner_id" => $partnerId);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);

    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);

    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($c);
    echo "\nraw result ".$result."\n";

    $ret = json_decode($result, true);
    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: ".$accessToken.", refresh_token: ".$newRefreshToken."\n";
    return $ret;
}

$host="https://partner.shopeemobile.com";

$partnerId = 847892;
$partnerKey = "57615053704d6470644f554a78656d50484143644964436a5568777544524579";

$code="494d7a4a4f5a66524556776f66425453";

// $shopId=200520705;
// getTokenShopLevel($code, $partnerId, $partnerKey, $shopId);

$accountId=19479;
getTokenAccountLevel($code, $partnerId, $partnerKey, $accountId)

?>
RefreshAccessToken


Depois que o access_token expirar, atualize usando o refresh_token para fazer a chamada para essa API. Depois da chamada, um novo refresh_token e um access_token serão retornados ao mesmo tempo. O novo refresh_token precisa ser usado na próxima vez que essa API for chamada.



Path:

Ambiente de produção: https://partner.shopeemobile.com/api/v2/auth/access_token/get

Ambiente de teste/Sandbox: https://partner.test-stable.shopeemobile.com/api/v2/auth/access_token/get



Método de solicitação: POST

⚠️ Nota
Cada main_account_id vai ter os mesmos access_token e refresh_token iniciais quando a chamada de GetAccessToken for feita pela primeira vez
No entanto, depois da chamada ao endpoint RefreshAccessToken um novo conjunto de access_token e refresh_token independentes serão gerados para cada shop_id e merchant_id.
Exemplo:
O primeiro access_token e o refresh_token obtidos na chamada GetAccessToken API são aplicáveis para 7 shop_ids e 3 merchant_ids.
Depois do primeiro access_token expirar, você deve usar o primeiro refresh_token para fazer a chamada RefreshAccessToken.
Você vai receber 10 conjuntos de  access_token e refresh_token independentes, para cada shop_id e merchant_id. Depois disso, os shop_id e merchant_id não vão mais compartilhar os mesmos access_token ou refresh_token.


Public parameters:

Nome do parâmetro	Tipo	Mandatório	Descrição
sign	string	True	Assinatura obtida pelo hashing HMAC-SHA256 da sign base string (ordem: partner_id, api path, timestamp) com partner_key.
partner_id	int	True	O partner_id obtido do app. Esse  partner_id é inserido na consulta.
timestamp	int	True	Timestamp, válido por 5 minutos.


Request parameters:

Nome do parâmetro	Tipo	Mandatório	Descrição
refresh_token	string	True	Use o refresh_token para gerar um novo access_token. Cada refresh_token é válido por 30 dias, e só pode ser usado uma vez pelo shop_id ou merchant_id.
partner_id	int	True	O partner_id obtido do app. Esse  partner_id é inserido no corpo da solicitação.
shop_id	int	
True, insiraapenas 1	O shop_id da conta principal que concedeu autorização ao seu APP. Apenas o shop_id ou merchant_id pode ser selecionado como parâmetro, e devem ser atualizados separadamente.
merchant_id	int	O merchant_id de identificação da conta principal que concedeu autorização ao APP. Apenas o shop_id ou merchant_id pode ser selecionado como parâmetro, e devem ser atualizados separadamente.


Response parameters:

Nome do parâmetro	Tipo	Descrição
request_id	string	ID das solicitações da API requests; sempre devolvida.Usada para diagnosticar problemas.
error	string	Códigos de erro em solicitações da API; sempre devolvidos.Quando a chamada é bem-sucedida, o código de erro é devolvido em branco.
refresh_token	string	Novo refresh_token.Retornado quando a chamada da API é bem-sucedida.Use o refresh_token para conseguir um novo access_token.Cada refresh_token é válido por 30 dias e só pode ser usado uma vez por um shop_id ou merchant_id.
access_token	string	Retornado quando a chamada da API é bem-sucedida.Um código dinâmico que pode ser usado diversas vezes e expira em 4 horas.
expire_in	int	Retornado quando a chamada da API é bem-sucedida.O período de validade do access_token, em segundos.
message	string	Sempre retornado. Tem informações detalhadas de erros.
merchant_id	int	Retornado quando a chamada é bem-sucedida.O merchant_id para esse refresh, para identificar cada vendedor.
shop_id	int	Retornado quando a chamada é bem-sucedida.O shop_id que foi utilizado para esse refresh.
partner_id	int	Retornado quando a chamada é bem-sucedida.O partner_id que foi utilizado para o refresh.
⚠️ Notas
Depois que um novo access_token for gerado, o token antigo ainda é válido por 5 minutos.
Uma re-autorização vai acionar uma atualização do refresh_token e do access_token.
Você deve fazer a chamada ao endpoint  RefreshAccessToken dentro do período de validade da autorização.
Se você não salvou o novo refresh_token e o access_token devolvidos, veja soluções possíveis.


Python Code Demo:

Python
# refresh token


def get_access_token_shop_level(shop_id, partner_id, tmp_partner_key, refresh_token):
    timest = int(time.time())
    host = "https://partner.test.shopeemobile.com"
    path = "/api/v2/auth/access_token/get"
    body = {"shop_id": shop_id, "refresh_token": refresh_token,"partner_id":partner_id}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)
    # print(url)
    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token


def get_access_token_merchant_level(merchant_id, partner_id, tmp_partner_key, refresh_token):
    timest = int(time.time())
    host = "https://partner.test.shopeemobile.com"
    path = "/api/v2/auth/access_token/get"
    body = {"merchant_id": merchant_id, "refresh_token": refresh_token}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)

    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token

partner_id = 2006566
partner_key = "1a78dde5d6c3342f56ac939cbdd81607654c0e87725e118736ba5e3ae31c579c"
shop_id = 602226924
main_account_id = 31219
merchant_id = 45719
code = "c01204cada7b4cd0e4688154f5a256ca"
print(shop_auth())
# access_token,refresh_token = get_token_shop_level(code,partner_id,partner_key,602226924)
# print(access_token)
# print(refresh_token)
# print(get_access_token_shop_level(shop_id,partner_id,partner_key,refresh_token))


access_token,refresh_token = get_token_account_level(code,partner_id,partner_key,main_account_id)
print(access_token)
print(refresh_token)
print(get_access_token_merchant_level(merchant_id,partner_id,partner_key,refresh_token))
   


Java Code Demo:

Java

    //shop refresh the access token
    public static String[] get_access_token_shop_level(String refresh_token,long partner_id,String tmp_partner_key,long shop_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/auth/access_token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("refresh_token",refresh_token);
            map.put("shop_id",shop_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }

    //merchant refresh the access token
    public static String[] get_access_token_merchant_level(String refresh_token,long partner_id,String tmp_partner_key,long merchant_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/auth/access_token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("refresh_token",refresh_token);
            map.put("merchant_id",merchant_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }
}


PHP Code Demo:

PHP
<?php 

function getAccessTokenShopLevel($partnerId, $partnerKey, $shopId, $refreshToken) {
    global $host;
    $path = "/api/v2/auth/access_token/get";
    
    $timest = time();
    $body = array("partner_id" => $partnerId, "shop_id" => $shopId, "refresh_token" => $refreshToken);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);


    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);

    $result = curl_exec($c);
    echo "\nraw result ".$result."\n";

    $ret = json_decode($result, true);

    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: ".$accessToken.", refresh_token: ".$newRefreshToken."\n";
    return $ret;
}

function getAccessTokenMerchantLevel($partnerId, $partnerKey, $merchantId, $refreshToken) {
    global $host;
    $path = "/api/v2/auth/access_token/get";
    
    $timest = time();
    $body = array("partner_id" => $partnerId, "merchant_id" => $merchantId, "refresh_token" => $refreshToken);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);


    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($c);
    echo "\nraw result ".$result."\n";

    $ret = json_decode($result, true);
    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: ".$accessToken.", refresh_token: ".$newRefreshToken."\n";
    return $ret;
}

$host="https://partner.shopeemobile.com";

$partnerId = 847892;
$partnerKey = "57615053704d6470644f554a78656d50484143644964436a5568777544524579";




// $shopId=200520705;
// $shopRefreshToken="71724c4e68746b546965424c70617244";
// getAccessTokenShopLevel($partnerId, $partnerKey, $shopId, $shopRefreshToken)

$merchantId=1018829;
$merchantRefreshToken="546e5064627042696756455277774f53";
getAccessTokenMerchantLevel($partnerId, $partnerKey, $merchantId, $merchantRefreshToken)

?>
Atualizando o access_token e refresh_token de uma loja


1.Use o código e o shop_id da URL para fazer a chamada ao endpoint GetAccessToken e conseguir o primeiro par de access_token e o refresh_token.

Redirect URL: https://open.shopee.com/?code=7867624d4e76616648544f6e52625557&shop_id=54804)



Solicitação: https://partner.shopeemobile.com/api/v2/auth/token/get?partner_id=1000016&timestamp=1657263479&sign=9c685bc7e4a74e90f45fe1933f1d72b2d9705acda4093a9fb1ec7e2b57ccea2a



{"shop_id":54804,

"code":"7867624d4e76616648544f6e52625557",

"partner_id":1000016

}



2.Salve o primeiro par de access_token e refresh_token retornados.

{

  "refresh_token": "456e416149664b76745a6a794156794a",

  "access_token": "6a55746e61546f707579627656637464",

  "expire_in": 13859,

  "request_id": "c040b886cfcabdfa5a23af51c595cd1b",

  "error": "",

  "message": ""

}



3.Faça a chamada ao endpoint RefreshAccessTokenpara atualizar o access_token e o refresh_token.

Solicitação: https://partner.shopeemobile.com/api/v2/auth/access_token/get?partner_id=1000016×tamp=1657263479&sign=9c685bc7e4a74e90f45fe1933f1d72b2d9705acda4093a9fb1ec7e2b57ccea2a



{"shop_id":54804,

"refresh_token":"456e416149664b76745a6a794156794a",

"partner_id":1000016

}



4.Salve os novos access_token e refresh_token.

{

  "partner_id": 1000016,

  "refresh_token": "666478546b6c63464867685554477a57",

  "access_token": "7a5970754768697552654a466f425573",

  "expire_in": 14400,

  "request_id": "6d79dd0ffe4e070e185c71ca5153cd51",

  "error": "",

  "message": "",

  "shop_id": 54804

}

Atualizando o access_token e o refresh_token de uma conta principal


1.Use o código e o shop_id da URL para fazer a chamada ao endpoint GetAccessToken e conseguir o primeiro par de access_token e refresh_token.

Redirect URL: : https://open.shopee.com/?code=644d4e48787873706c5a444c776d4b59&main_account_id=10208

Solicitação: https://partner.shopeemobile.com/api/v2/auth/token/get?partner_id=1000016&timestamp=1657263479&sign=9c685bc7e4a74e90f45fe1933f1d72b2d9705acda4093a9fb1ec7e2b57ccea2a

{"main_account_id":10208,

"code":"644d4e48787873706c5a444c776d4b59",

"partner_id":1000016

}



2.Salve o primeiro par de access_token e refresh_token retornados.

{

  "refresh_token": "684d42685667777868597a4477587455",

  "access_token": "44776151594778486943647644745361",

  "expire_in": 14344,

  "request_id": "9199e13ee74b22411498209cb5516e24",

  "merchant_id_list": [

      1001705

  ],

  "shop_id_list": [

      33142,

      46154

  ],

  "error": "",

  "message": ""

}



3.Faça a chamada ao endpoint  RefreshAccessToken API para atualizar o access_token e o refresh_token da shop_id e da merchant_id, respectivamente

Solicitação: https://partner.shopeemobile.com/api/v2/auth/access_token/get?partner_id=1000016&timestamp=1657868745&sign=b78833ddcf533903cfae818bbfcf2b6b630e3bc0c941dd65453632f63bf7b495

{"shop_id":33142,

"refresh_token":"684d42685667777868597a4477587455",

"partner_id":1000016

}



Solicitação: https://partner.shopeemobile.com/api/v2/auth/access_token/get?partner_id=1000016&timestamp=1657868745&sign=b78833ddcf533903cfae818bbfcf2b6b630e3bc0c941dd65453632f63bf7b495

{"merchant_id":1001705,

"refresh_token":"684d42685667777868597a4477587455",

"partner_id":1000016

}



4.Salve os novosaccess_token e refresh_token.

{

  "partner_id": 1000016,

  "refresh_token": "417472546e73504949676279576c477a",

  "access_token": "646d474965714a696177764963775743",

  "expire_in": 14400,

  "request_id": "78e64d11cb6dec6f6669282839fca916",

  "error": "",

  "message": "",

  "shop_id": 33142

}

{

  "partner_id": 1000016,

  "refresh_token": "715075736d6c6570544364774f437369",

  "access_token": "69634c664a7350696c6b466d5a53714a",

  "expire_in": 14400,

  "request_id": "51eacbc81bd6fa8fddddf1e0ef2dee16",

  "error": "",

  "message": "",

  "merchant_id": 1001705

}



Seguindo os passos acima, você pode realizar a chamada ao endpoint RefreshAccessToken em 4 horas para ter o seu novo access_token e refresh_token. Mantenha o ciclo de chamadas para garantir que você continue a receber novos tokens dentro do período de autorização.

⚠️ NotaSe você não salvou o novo refresh_token e o access_token retornados, veja soluções possíveis.
Cancelando autorização


Você pode cancelar uma autorização mudando a URL ou pela Central do Vendedor.

Cancelando a autorização através da alteração da URL de autorização


Siga os mesmos passos para gerar uma URL de autorização, mas substitua a URL fixa por essas URLs de cancelamento de autorização:

Ambiente de produção:
https://partner.shopeemobile.com/api/v2/shop/cancel_auth_partner?partner_id=10090&redirect=https://open.shopee.com&timestamp=1594897040&sign=90c12d3932f3826f0c72242e1ec6492eec9a1298658f41f7a9469664801c4e5a


Ambiente de teste/Sandbox:
https://partner.test-stable.shopeemobile.com/api/v2/shop/cancel_auth_partner?partner_id=1000016&redirect=https://open.shopee.com&timestamp=1657254106&sign=47e8712bb89dbc7c7f71eb690310d089b951801cb104763981de5b3dacc3f07c


Faça login na sua conta.


Selecione Cancelar autorização.


Cancelando a autorização através da Central do Vendedor


Na Central do Vendedor em "Configuração > Integradora/ERPs", os vendedores podem ver quais apps a loja autorizou e as datas de expiração das respectivas autorizações. O vendedor também pode cancelar uma autorização diretamente selecionando desvincular na coluna de ações.


FAQs sobre autorização e autenticação


Se você encontrar erros durante o processo de autorização, você pode verificar nossos FAQs sobre autorização e autenticação.