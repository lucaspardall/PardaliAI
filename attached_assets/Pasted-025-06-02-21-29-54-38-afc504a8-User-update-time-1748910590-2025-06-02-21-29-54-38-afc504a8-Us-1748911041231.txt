025-06-02 21:29:54.38
afc504a8
User
update_time: 1748910590
2025-06-02 21:29:54.38
afc504a8
User
}
2025-06-02 21:29:54.38
afc504a8
User
[Webhook] Processando desautoriza√ß√£o para loja ID: 1201681388
2025-06-02 21:29:54.38
afc504a8
User
[Storage] Buscando loja por shopId: 1201681388
2025-06-02 21:29:54.48
afc504a8
User
[DB] Retry 2/3
2025-06-02 21:29:54.58
afc504a8
User
[DB] Retry 3/3
2025-06-02 21:29:54.58
afc504a8
User
[Webhook] Buscando loja 1201681388 no banco...
2025-06-02 21:29:54.58
afc504a8
User
[Storage] Buscando loja por shopId: 1201681388
2025-06-02 21:29:54.73
afc504a8
User
[DB] Retry 2/3
2025-06-02 21:29:54.83
afc504a8
User
type: 'OTHER',
2025-06-02 21:29:54.83
afc504a8
User
code: undefined,
2025-06-02 21:29:54.83
afc504a8
User
message: 'Query inv√°lida: object recebido em vez de string',
2025-06-02 21:29:54.83
afc504a8
User
severity: undefined
2025-06-02 21:29:54.83
afc504a8
User
}
2025-06-02 21:29:54.83
afc504a8
User
[DB] ‚ùå Todas tentativas falharam
2025-06-02 21:29:54.83
afc504a8
User
Erro na execu√ß√£o de query: {
2025-06-02 21:29:54.83
afc504a8
User
query: 'Query inv√°lida',
2025-06-02 21:29:54.83
afc504a8
User
paramCount: 2,
2025-06-02 21:29:54.83
afc504a8
User
error: 'Query inv√°lida: object recebido em vez de string',
2025-06-02 21:29:54.83
afc504a8
User
code: undefined
2025-06-02 21:29:54.83
afc504a8
User
}
2025-06-02 21:29:54.83
afc504a8
User
[Storage] Erro ao buscar loja por shopId: Error: Query inv√°lida: object recebido em vez de string
2025-06-02 21:29:54.83
afc504a8
User
at file:///home/runner/workspace/dist/index.js:478:21
2025-06-02 21:29:54.83
afc504a8
User
at executeWithRetry (file:///home/runner/workspace/dist/index.js:431:32)
2025-06-02 21:29:54.83
afc504a8
User
at async Function.query (file:///home/runner/workspace/dist/index.js:476:18)
2025-06-02 21:29:54.83
afc504a8
User
at async NeonPreparedQuery.execute (file:///home/runner/workspace/node_modules/drizzle-orm/neon-serverless/session.js:76:20)
2025-06-02 21:29:54.83
afc504a8
User
at async DatabaseStorage.getStoreByShopId (file:///home/runner/workspace/dist/index.js:829:26)
2025-06-02 21:29:54.83
afc504a8
User
at async processShopeeWebhookEvent (file:///home/runner/workspace/dist/index.js:3290:17)
2025-06-02 21:29:54.83
afc504a8
User
at async WebhookQueue.executeWebhookJob (file:///home/runner/workspace/dist/index.js:3424:11)
2025-06-02 21:29:54.83
afc504a8
User
at async WebhookQueue.processWebhook (file:///home/runner/workspace/dist/index.js:3415:11)
2025-06-02 21:29:54.83
afc504a8
User
at async Immediate. (file:///home/runner/workspace/dist/index.js:5313:11)
2025-06-02 21:29:54.83
afc504a8
User
[Storage] Detalhes do erro: {
2025-06-02 21:29:54.83
afc504a8
User
message: 'Query inv√°lida: object recebido em vez de string',
2025-06-02 21:29:54.83
afc504a8
User
code: undefined,


O ChatGPT disse:

Pensou por 14 segundos
O que o log est√° dizendo (e por qu√™ est√° falhando)
O driver pg/Neon recebeu um objeto (a estrutura que o Drizzle cria para representar a SQL) no lugar da string SQL que ele espera como 1¬∫ argumento.

text
Copiar
Editar
Query inv√°lida: object recebido em vez de string
paramCount: 2            ‚Üê ele percebeu 2 ‚Äúpar√¢metros‚Äù, mas o 1¬∫ n√£o √© uma string
Isso normalmente acontece quando fazemos algo assim:

ts
Copiar
Editar
// ‚ùå exemplo do que costuma dar o erro
const stmt = db.select().from(stores).where(eq(stores.shopId, shopId)); // stmt √© um objeto DrizzleSQL
await client.query(stmt);        // ‚Üê client.query espera string, recebeu objeto
3 formas r√°pidas de corrigir
Op√ß√£o	O que muda	Exemplo enxuto
1. Usar o m√©todo .execute() do pr√≥prio Drizzle	Deixa o Drizzle chamar o driver para voc√™. N√£o passa por client.query.	```ts
const store = await db.select()		
.from(stores)		
.where(eq(stores.shopId, shopId))		
.limit(1)		
.execute(); // üëà resolve		

|
Copiar
Editar
| **2. Passar `sql.sql` e `sql.params` manualmente** | Se voc√™ realmente quer usar `client.query`. |```ts
const stmt = db.select().from(stores).where(eq(stores.shopId, shopId));
const { sql, params } = stmt.toSQL(); // ou .sql & .params em vers√µes antigas
await client.query(sql, params);
```|
| **3. Usar a API `db.query.<table>.findFirst` (mais simples)** | Abstra√ß√£o de alto n√≠vel do Drizzle 2.x+ |```ts
import { eq } from "drizzle-orm";
const store = await db.query.stores.findFirst({
  where: eq(stores.shopId, shopId),
});
```|

---

### Onde mexer no seu c√≥digo

Pelo stack-trace o ponto cr√≠tico fica em `DatabaseStorage.getStoreByShopId` (dist/index.js:829).  
Procure algo como:

```ts
// algo parecido com isto ‚Üì
const result = await db.query(stmt);      // stmt √© objeto
Troque por uma das abordagens da tabela. O caminho mais direto √©:

ts
Copiar
Editar
export async function getStoreByShopId(shopId: string) {
  return await db.query.stores.findFirst({
    where: eq(stores.shopId, shopId),
  });
}
Checklist p√≥s-ajuste
Transpile/Build novamente (tsx, ts-node ou esbuild) para garantir que dist/ reflita a mudan√ßa.

Desative o retry temporariamente ou aumente o delay para n√£o bater 3 vezes no mesmo erro durante testes.

Logue a SQL gerada (console.log(stmt.toSQL())) na primeira execu√ß√£o para confirmar que o placeholder $1 (ou ?) est√° entrando certo e o valor de shopId vem como string.

Feito isso, a exce√ß√£o ‚Äúobject recebido em vez de string‚Äù deve desaparecer e o webhook de desautoriza√ß√£o deve concluir sem retries nem falhas.

Se precisar checar outra parte do pipeline (fila WebhookQueue, workers, etc.), manda aqui o trecho que olhamos juntos.