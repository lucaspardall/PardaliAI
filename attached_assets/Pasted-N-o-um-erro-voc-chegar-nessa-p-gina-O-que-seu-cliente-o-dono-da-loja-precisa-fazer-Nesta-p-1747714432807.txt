Não é um erro você chegar nessa página. O que seu cliente (o dono da loja) precisa fazer é:

Nesta página (a da imagem), ele deve inserir o login e senha da loja Shopee dele. (Não é uma conta de desenvolvedor da Open Platform, mas sim as credenciais que ele usa para gerenciar a loja dele na Shopee).
Após logar, a Shopee provavelmente mostrará uma tela pedindo para ele confirmar que ele autoriza a sua aplicação ("CIPSHOPEE" ou o nome que você deu no portal de desenvolvedores) a acessar os dados da loja dele. Ele precisa clicar em "Autorizar" (ou o botão equivalente).
Só então a Shopee o redirecionará de volta para a sua redirectUrl (ex: https://cipshopee.replit.app/api/shopee/callback) com um code e o shop_id.
Se o problema é que, mesmo após seu cliente tentar logar e autorizar, ele volta para a mesma tela de login ou o fluxo não completa, aí sim temos um problema a investigar.

Vamos analisar o seu código express router (que parece ser shopee.ts ou similar, baseado no /authorize e /callback) e como ele interage com o ShopeeAuthManager.

Revisão do Código do Router (Express.js):

Rota /authorize (router.get('/authorize', ...)):

isAuthenticated: Você tem um middleware isAuthenticated. Isso é para autenticar o usuário da sua aplicação (quem está tentando conectar uma loja Shopee através da sua plataforma), o que é uma boa prática.
Criação do Cliente: const shopeeClient = createClient({ region: 'BR' }); está correto para iniciar o processo.
Geração da authUrl: const authUrl = shopeeClient.getAuthorizationUrl(); chama o método que revisamos anteriormente. Assumindo que o ShopeeAuthManager.getAuthorizationUrl() está usando a baseUrl correta para a página de autorização do Brasil e um timestamp atual, a URL gerada deve ser válida.
Adição do parâmetro region=BR:
TypeScript

if (!finalAuthUrl.includes('region=')) {
  finalAuthUrl = finalAuthUrl + (finalAuthUrl.includes('?') ? '&' : '?') + 'region=BR';
}
A URL de autorização /api/v2/shop/auth_partner da Shopee não espera um parâmetro region na query string. A regionalização geralmente é feita pelo domínio (partner.shopee.com.br vs partner.shopeemobile.com para a página de login, se houver essa distinção) ou pela seleção de país na própria página de login da Shopee (como visto na sua imagem, onde "SG" é selecionável). Adicionar region=BR manualmente à URL de autorização provavelmente não terá efeito ou pode até ser inesperado pela Shopee. Recomendo remover essa adição manual. A seleção da região é feita pelo dono da loja na página da Shopee, se necessário, ou pelo domínio que você usa para baseUrl no getAuthorizationUrl.
Logs: Excelentes para depuração.
Redirecionamento em Desenvolvimento vs. Produção: A lógica de mostrar uma página com o link em desenvolvimento e redirecionar diretamente em produção (usando meta http-equiv="refresh") é uma abordagem comum e funcional. O meta refresh é uma boa maneira de passar a URL longa sem problemas de codificação que res.redirect() às vezes pode ter com URLs muito complexas.
Abrir URL em Desenvolvimento: A tentativa de usar o módulo open é um bom "quality of life" feature para desenvolvimento.
Rota /callback (router.get('/callback', ...)):

isAuthenticated: Correto, garante que o callback está sendo tratado para um usuário logado na sua aplicação.
Extração de code e shop_id: const { code, shop_id } = req.query; está correto.
Validação: Verificar se code e shop_id existem é crucial.
Troca do Código por Tokens: const tokens = await shopeeClient.connect(code as string, shop_id as string); chama o método do seu ShopeeClient que, por sua vez, usa ShopeeAuthManager.getAccessToken(). Isso está correto.
Armazenamento dos Tokens: A lógica para verificar se a loja já existe e então criar ou atualizar os dados no seu storage (incluindo os novos tokens e tokenExpiresAt) é a parte central e parece bem implementada.
Notificações e Redirecionamento: Criar notificações para o usuário e redirecioná-lo para o dashboard é um bom fluxo de UX.
Tratamento de Erro: O try...catch com logging e notificação de erro é robusto.
Possíveis Causas para "Cair no Mesmo Lugar" (na tela de login da Shopee):

baseUrl Incorreta na getAuthorizationUrl() (dentro do ShopeeAuthManager):

Como mencionei, a sua imagem mostra a página de login da Shopee em partner.shopeemobile.com (com um seletor de país "SG" por padrão).
Seu código auth.ts para getAuthorizationUrl usa const baseUrl = getApiBaseUrl(this.config.region); e seu utils.ts (getApiBaseUrl) retorna https://partner.shopeemobile.com para a região 'BR'.
Isso significa que você está enviando seu cliente para https://partner.shopeemobile.com/api/v2/shop/auth_partner?.... Esta é a URL global de autorização da Shopee. É esperado que ela mostre um seletor de país/região (como "SG" na sua imagem) para que o vendedor possa logar na conta correta da sua região (ex: Brasil).
O que pode estar acontecendo: Se o vendedor brasileiro não selecionar "Brasil" (ou se a interface não for clara para ele sobre como fazer isso na página global) e tentar logar com as credenciais brasileiras enquanto a página pensa que ele está em "SG" (Singapura), o login falhará, e a Shopee pode simplesmente reapresentar a tela de login.
Verificação: Existe uma URL de autorização específica para o Brasil, como https://partner.shopee.com.br/api/v2/shop/auth_partner? Se sim, o baseUrl no seu ShopeeAuthManager.getAuthorizationUrl() deveria ser fixo para este domínio quando this.config.region for 'BR', em vez de usar o getApiBaseUrl que retorna o domínio global. Se não há uma URL de página de autorização específica para o Brasil e a global é a correta, então o usuário precisa selecionar a região correta na página de login da Shopee.
timestamp ou sign Inválidos na authUrl:

Se o timestamp estiver expirado quando o cliente clica no link, a Shopee invalidará a requisição. Garanta que a URL é sempre gerada no momento do clique ou tem uma vida útil muito curta.
Se a sign estiver incorreta (devido à partnerKey errada, ou a baseString montada incorretamente no ShopeeAuthManager.getAuthorizationUrl), a Shopee também pode rejeitar. A baseString deve ser this.config.partnerId + basePathForShopAuthorize + timestamp.
redirectUrl Não Configurada Corretamente no Shopee Open Platform Console:

A redirectUrl que você usa para gerar a authUrl (this.config.redirectUrl) deve ser idêntica à(s) URL(s) de redirecionamento que você cadastrou para sua App no portal de desenvolvedores da Shopee. Qualquer pequena diferença pode fazer o fluxo falhar após a autorização.
Problemas com Cookies/Sessão no Navegador do Cliente: Às vezes, extensões de navegador, configurações de privacidade rígidas ou cookies corrompidos podem interferir em fluxos OAuth. Pedir para o cliente tentar em uma janela anônima ou em outro navegador pode ajudar a diagnosticar isso.

Sugestões para o Código do Router:

Remova a adição manual do parâmetro region=BR à authUrl:

TypeScript

// let finalAuthUrl = authUrl;
// if (!finalAuthUrl.includes('region=')) {
//   finalAuthUrl = finalAuthUrl + (finalAuthUrl.includes('?') ? '&' : '?') + 'region=BR';
// }
// Use authUrl diretamente no redirect ou na página de desenvolvimento.
A regionalização da página de login da Shopee geralmente é tratada pelo domínio ou por um seletor na própria página.

Confirme a baseUrl para a Página de Autorização no Brasil: Este é o ponto mais crucial para investigar porque seu cliente pode estar "preso" na tela de login. Se a Shopee Brasil tiver um portal de autorização dedicado (ex: partner.shopee.com.br/api/v2/shop/auth_partner), use esse. Se não, e o global (partner.shopeemobile.com/api/v2/shop/auth_partner) é o correto, então o cliente precisa estar ciente de que pode precisar selecionar a região/país na página da Shopee.

Em resumo, o código do seu router para iniciar o fluxo e lidar com o callback parece estruturalmente correto. O problema de "cair no mesmo lugar" provavelmente reside em:
a.  Qual URL base (domínio) está sendo usada em ShopeeAuthManager.getAuthorizationUrl() e se ela é a correta para a página de login/autorização de vendedores brasileiros.
b.  A validade do timestamp e da sign no momento do clique.
c.  A exata correspondência da redirectUrl.

A tela da imagem é a etapa correta do processo. Agora é garantir que, após o cliente interagir com ela, o fluxo continue como esperado.