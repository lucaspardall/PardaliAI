Chamadas de API
Última atualização: 2022-10-10
Idioma suportado: Inglês / 简体中文 / 繁體中文 / Português
⚠️



Atualmente temos dois ambientes para APIs para desenvolvedores locais:

ID do parceiroNota
Cada autorização é válida por 365 dias. Depois que a autorização expirar, você precisa entrar em contato com o vendedor para que ele conceda a autorização do App novamente.
Se uma loja primária com Session Initiation Protocol (SIP) concede autorização para um aplicativo, todas as lojas afiliadas com SIP autorizam a autorização para o aplicativo automaticamente. No entanto, as lojas afiliadas terão permissões de chamada de API limitadas .
Processo de Autorização


Selecione o ambiente com base nos servidores locais de onde você está acessando a plataforma de API.



Atualmente, a plataforma OpenAPI só tem dois métodos de proteção: GET e POST.

Gerando o link de autorização
Para o Seller in House System App (vendedor que administra seus próprios aplicativos), você pode logar em Open Platform> App list> clicar em Authorize> preencher a URL de redirecionamento para gerar um link de autorização.




No documento da API, você verá dois tipos de parâmetros:Correção de URL e outros parâmetros necessários .

URL de autorização fixa:

URL de autorização fixa:

https://partner.shopeemobile.com/api/v2/shop/auth_partner



Ambiente de teste sandbox:

Ambiente de teste sandbox:



Nenhum documento de API existe 3 tipos, por conta das diferentes parâmetros comuns. As configurações públicas existentes são:

Parâmetros	É preciso retornar?	Descrição
id da solicitação	Sim	Cada solicitação para a API tem um ID único. Se você tiver algum problema com a API, por favor, envie esse ID e as informações da API para receber ajuda mais rapidamente.
erro	Sim	Código de erro. Se a solicitação for bem-sucedida, o parâmetro de erro estará em branco. Se houver algum problema, o código de erro será refletido nesse campo.
mensagem	Sim	Mensagem de erro. Se a solicitação for bem-sucedida, o parâmetro estará em branco. Se houver algum problema, esse campo vai ter informações fornecidas sobre o erro.
aviso	Sim	Se a chamada para bem-sucedida mas algum dado ou parte da solicitação solicitada, a informação será refletida nesse campo
Calculando o sinal do parâmetro

Calculando o sinal do parâmetro



As APIs públicas não precisam de token de acesso, enquanto as APIs de loja e de comerciante precisam. Isso significa que as Shop APIs e o Merchant só podem receber chamadas depois que a loja conceder autorização.

Existem 3 tipos de APIs que requerem o uso de parâmetros diferentes para criar o sign base string. (consistente com suas configurações comuns).



Você precisa concatenar o caminho da API (sem host) e as configurações comuns abaixo em uma única string base de sinal na seguinte ordem:



Para APIs de loja : partner_id, caminho da API, registro de data e hora, access_token, shop_id
Para APIs de comerciantes : partner_id, caminho da API, carimbo de data/hora, token de acesso, merchant_id
Para APIs públicas : partner_id, caminho da API, registro de data e hora


Diferentes tipos de APIs têm elementos diferentes na string base. Você precisa concatenar o caminho da API (sem host) e os seguintes parâmetros comuns em uma string única. Você precisa seguir a sequência (base string) como está descrito abaixo:

Utilize o algoritmo HMAC-SHA256 para fazer o hash da string de base do sign, e use o parceiro test_key como chave de criptografia. O valor hexadecimal em letras minúsculas do hash é uma assinatura de autenticação.



Demonstração de código Python:

Pitão
import hmac
import json
import time
import requests
import hashlib


def shop_auth():
    timest = int(time.time())
    host = "https://partner.shopeemobile.com"
    path = "/api/v2/shop/auth_partner"
    redirect_url = "https://www.baidu.com/"
    partner_id = 80001
    tmp = "test...."
    partner_key = tmp.encode()
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    ##generate api
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s&redirect=%s" % (partner_id, timest, sign, redirect_url)
    print(url)


*Exemplo：ID do parceiro, caminho da API, registro de data e hora, token de acesso, ID da loja

Ir
func auth_shop(){
	timest := strconv.FormatInt(time.Now().Unix(),10)
	host := "https://partner.test.shopeemobile.com"
	path := "/api/v2/shop/auth_partner"
	redirectUrl := "https://www.baidu.com/"
	partnerId := strconv.Itoa(2006566)
	partnerKey := "1391fd986fe8ec7569bebed75b0c33ee35eb5a305bed7038657a5cd5f75b1c88"
	baseString := fmt.Sprintf("%s%s%s", partnerId,path,timest)
	h := hmac.New(sha256.New,[]byte(partnerKey))
	h.Write([]byte(baseString))
	sign := hex.EncodeToString(h.Sum(nil))
	url := fmt.Sprintf(host+path+"?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", partnerId,timest,sign, redirectUrl)
	fmt.Println(url)
}


Caminho da API: /api/v2/shop/get_shop_info

Java
    //generate auth url
    public static void shop_auth(){
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/shop/auth_partner";
        String redirect_url = "https://www.baidu.com/";
        long partner_id = 123456L;
        String tmp_partner_key = "...";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        String sign = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = String.format("%064x",new BigInteger(1,mac.doFinal(base_string)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", partner_id,timest, sign, redirect_url);
        System.out.println(url);
    }


token de acesso: 59777174636562737266615546704c6d

PHP
<?php 


function authShop($partnerId, $partnerKey) {   
    global $host;
    $path = "/api/v2/shop/auth_partner";
    $redirectUrl = "https://www.baidu.com/";

    $timest = time();
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", $host, $path, $partnerId, $timest, $sign, $redirectUrl);
    return $url;
}

$host="https://partner.shopeemobile.com";

$partnerId = 847892;
$partnerKey = "57615053704d6470644f554a78656d50484143644964436a5568777544524579";

echo authShop($partnerId, $partnerKey);
?>


Exemplos de links de autorização:

Exemplos de links de autorização:

Ambiente de Produção:

Ambiente de Produção:



ID do parceiro: 2001887

ID do parceiro: 2001887

⚠️ NotaO timestamp usado para calcular o sinal só é válido por 5 minutos. Depois disso, o link de autorização não será mais válido, você precisará gerar um novo link.
Conseguindo autorizações da(s) loja(s)


token de acesso: 09777174636962737266615546704c6d



O vendedor pode usar a conta da loja para autorizar uma única loja ou a conta principal para autorizar diversas lojas/vendedores. As subcontas não podem ser usadas para entrar na página de autorização.

⚠️ NotaAplicativos do tipo Seller In-House System só podem ser autorizados a acessar dados da própria loja do vendedor. Você também precisa fazer login na conta do desenvolvedor
Autorizando com uma conta de loja


1. O vendedor preencha as informações e faça Login .




*Exemplo:partner_id, caminho da API, registro de data e horaO vendedor preencha o código de seleção enviado para o celular e selecione Verificar .



Verificar .

Caminho da API: /api/v2/public/get_shops_by_partnerDepois do login, o vendedor seleciona Confirmar autorização .



Confirmar autorização .

4. Após a autorização, o front-end será direcionado para a URL de redirecionamento no seu link de autorização:

https://open.shopee.com/?code=xxxxxxxxxx&shop_id=xxxxxx

Autorizando com a conta principal


Passo 2: Calcular a assinatura usando o algoritmo HMAC-SHA256Para fazer login na conta principal, o vendedor selecione Trocar para Sub-conta na página de login.




Faça o design da assinatura usando o algoritmo HMAC-SHA256 na string base e na chave do parceiro (obtida por meio da página de informações do app O vendedor preencha as informações e faça o). O resultado do cálculo é uma string codificada em hexadecimal.Conecte-se .




*Exemplo：O vendedor seleciona as lojas que precisam ser autorizadas. Se você precisar acessar uma API de vendedor, por favor, lembre-se ao vendedor para selecionar a opção Auth Merchant .




4. O vendedor seleciona Confirmar Autorização depois de selecionar.






Exemplo de código:Depois da autorização, o front-end será direcionado para a URL de redirecionamento no seu link de autorização:

https://open.shopee.com/?code=xxxxxx&main_account_id=xxxxxx

Utilizando o código de autorização
Para transações em APIs do tipo



Exemplo: conta de loja . Um código e o shop_id serão enviados para uma URL.

Se a autorização foi feita com a conta principal , um código e o main_account-id serão enviados para uma URL.

Nome do Parâmetro	Tipo	Descrição
código	corda	Retornado quando a chamada foi efetuada com sucesso. Esse código é usado para obter o access_token e o refresh_token. Ele é válido apenas uma vez e expira em 10 minutos.
id_da_loja	int	O ID da loja que abriu uma autorização para o seu App. Retorno após solicitação feita em uma conta da loja.
id_da_conta_principal	int	O ID da conta principal que abriu a autorização para sua loja. Retornado após a autorização feita em uma conta principal.
Obtendo e atualizando o access_token


https://partner.shopeemobile.com/api/v2/product/get_category?partner_id=851249×tamp=1654673582&shop_id=1001094&access_token=367a0a8eb9d1837cbf7c43b587a0faa4&sign=a40fc50a08c382eeee08e2eb00deb8464c6fdcbe4f1c271e033cdbca3ded4d5b&language=zh-hans



*Para esse endpoint da API，partner_id、timestamp、access_token、shop_id e sign são Parâmetros Comuns, e, idioma é um Parâmetros de Solicitação.

⚠️ NotaO access_token e o refresh_token de cada shop_id e Merchant_id precisam ser salvos separadamente
Obter token de acesso


Após a autorização, use o código shop_id ou main_account_id na URL para fazer uma chamada para essa API. Isso permite que você tenha acesso ao shop_id, comerciante_id, access_token e refresh_token.



Caminho:

Caminho:v2.shop.update_profilehttps://partner.shopeemobile.com/api/v2/auth/token/get

Ambiente de teste/Sandbox: https://partner.test-stable.shopeemobile.com/api/v2/auth/token/get 





Método de solicitação: POST



Corpo da solicitação:

Nome do Parâmetro	Tipo	Mandatório	Descrição
sinal	corda	Verdadeiro	Assinatura obtida pelo hashing HMAC-SHA256 da sign base string (ordem: partner_id, api path, timestamp) com o partner_key.
ID do parceiro	int	Verdadeiro	O Partner_id obtido do app. Esse parceiro_id foi inserido na consulta.
carimbo de data/hora	int	Verdadeiro	Carimbo de data/hora, válido por 5 minutos.


"logotipo da loja": "https://cf.shopee.sg/file/8424390be4677b0b3c37ce6499ce261a",

Nome do Parâmetro	Tipo	Mandatório	Descrição
código	corda	Verdadeiro	O código na URL de redirecionamento após a autorização. Válido apenas uma vez e expira em 10 minutos.
ID do parceiro	int	Verdadeiro	O Partner_id obtido do app. Esse parceiro_id foi inserido no corpo da solicitação.
id_da_loja	int	
Verdade, inserirapenas1	Com o shop_id autorizado, você pode selecionar o shop_id ou o main_account_id como parâmetros.
id_da_conta_principal	int	Com o main_account_id autorizado, você pode selecionar o shop_id ou o main_account_id como parâmetros.


"nome_da_loja": "123"

Nome do Parâmetro	Tipo	Descrição
ID da solicitação	corda	ID das solicitações da API; sempre retornada. Usado para diagnosticar problemas.
erro	corda	Códigos de erro em transações da API: sempre retornado.Quando uma chamada é bem-sucedida, o código de erro é devolvido em branco.
token de atualização	corda	Retornado quando a chamada da API é bem-sucedida.Use o refresh_token para obter um novo access_token. Válido para cada shop_id e Merchant_id respectivamente por 30 dias.
token de acesso	corda	Retornado quando a chamada da API é bem-sucedida.Um código sonoro que pode ser usado diversas vezes e expira em 4 horas.
expirar_em	int	Retornado quando a chamada da API é bem-sucedida.O período de validade do access_token, em segundos.
mensagem	corda	Sempre retornado. Possui informações reveladas sobre erros
lista_de_id_do_comerciante	int[ ]	Retornado quando existe um main_account_id nos parâmetros inseridos, todos os Merchant_ids autorizados sob a conta principal.
lista_de_id_da_loja	int[ ]	Retornado quando existe um shop_id nos parâmetros inseridos, todos os shop_id autorizados.


Demonstração de código Python:

Pitão
print(shop_auth())
# first time request token
def get_token_shop_level(code, partner_id, tmp_partner_key, shop_id):
    timest = int(time.time())
    host = "https://partner.shopeemobile.com"
    path = "/api/v2/auth/token/get"
    body = {"code": code, "shop_id": shop_id, "partner_id": partner_id}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)
    # print(url)
    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token


def get_token_account_level(code, partner_id, tmp_partner_key, main_account_id):
    timest = int(time.time())
    host = "https://partner.test.shopeemobile.com"
    path = "/api/v2/auth/token/get"
    body = {"code": code, "main_account_id": main_account_id, "partner_id": partner_id}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)

    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token


Demonstração do código Java :

Java
import com.alibaba.fastjson.JSONObject;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.HashMap;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;
import com.alibaba.fastjson.JSON;


public class shop_auth {
    public static void main(String[] args) throws ParseException, IOException {
        shop_auth();
        //get_token_shop_level(code,partner_id,partner_key,shop_id);
    }
    //generate auth url
    public static void shop_auth(){
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/shop/auth_partner";
        String redirect_url = "https://www.baidu.com/";
        long partner_id = 123456L;
        String tmp_partner_key = "...";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        String sign = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = String.format("%064x",new BigInteger(1,mac.doFinal(base_string)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s&redirect=%s", partner_id,timest, sign, redirect_url);
        System.out.println(url);
    }

    //shop request for access token for the first time
    public static String[] get_token_shop_level(String code,long partner_id,String tmp_partner_key,long shop_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/auth/token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("code",code);
            map.put("shop_id",shop_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }

    //main account request for the access token for the first time
    public static String[] get_token_account_level(String code,long partner_id,String tmp_partner_key,long main_account_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.test.shopeemobile.com";
        String path = "/api/v2/auth/token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("code",code);
            map.put("main_account_id",main_account_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }


Demonstração de código PHP:

PHP
<?php 

function getTokenShopLevel($code, $partnerId, $partnerKey, $shopId) {
    global $host;
    $path = "/api/v2/auth/token/get";
    
    $timest = time();
    $body = array("code" => $code,  "shop_id" => $shopId, "partner_id" => $partnerId);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);
    

    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $resp = curl_exec($c);
    echo "raw result: $resp";

    $ret = json_decode($resp, true);
    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: $accessToken, refresh_token: $newRefreshToken raw: $ret"."\n";
    return $ret;
}


function getTokenAccountLevel($code, $partnerId, $partnerKey, $mainAccountId) {
    global $host;
    $path = "/api/v2/auth/token/get";
    
    $timest = time();
    $body = array("code" => $code,  "main_account_id" => $mainAccountId, "partner_id" => $partnerId);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);

    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);

    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($c);
    echo "\nraw result ".$result."\n";

    $ret = json_decode($result, true);
    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: ".$accessToken.", refresh_token: ".$newRefreshToken."\n";
    return $ret;
}

$host="https://partner.shopeemobile.com";

$partnerId = 847892;
$partnerKey = "57615053704d6470644f554a78656d50484143644964436a5568777544524579";

$code="494d7a4a4f5a66524556776f66425453";

// $shopId=200520705;
// getTokenShopLevel($code, $partnerId, $partnerKey, $shopId);

$accountId=19479;
getTokenAccountLevel($code, $partnerId, $partnerKey, $accountId)

?>
Token de acesso de atualização


Depois que o access_token expirar, atualize usando o refresh_token para fazer a chamada para essa API. Depois da chamada, um novo update_token e um access_token serão retornados ao mesmo tempo. O novo update_token precisa ser usado na próxima vez que essa API para chamada.



Caminho:

Ambiente de produção: https://partner.shopeemobile.com/api/v2/auth/access_token/get

Ambiente de teste/Sandbox: https://partner.test-stable.shopeemobile.com/api/v2/auth/access_token/get



Método de solicitação : POST

⚠️ Nota
Cada main_account_id terá os mesmos access_token e refresh_token iniciais quando a chamada de GetAccessToken for feita pela primeira vez
No entanto, depois da chamada ao endpoint RefreshAccessToken um novo conjunto de access_token e refresh_token independentes serão gerados para cada shop_id e Merchant_id.
Exemplo:
O primeiro access_token e o refresh_token obtidos na chamada GetAccessToken API são válidos para 7 shop_ids e 3 Merchant_ids.
Depois do primeiro access_token expirar, você deve usar o primeiro refresh_token para fazer a chamada RefreshAccessToken.
Você vai receber 10 conjuntos de access_token e refresh_token independentes, para cada shop_id e Merchant_id. Depois disso, os shop_id e Merchant_id não vão mais compartilhar os mesmos access_token ou refresh_token.


Parâmetros públicos:

Nome do parâmetro	Tipo	Mandatório	Descrição
sinal	corda	Verdadeiro	Assinatura obtida pelo hashing HMAC-SHA256 da sign base string (ordem: partner_id, api path, timestamp) com partner_key.
ID do parceiro	int	Verdadeiro	O Partner_id obtido do app. Esse parceiro_id foi inserido na consulta.
carimbo de data/hora	int	Verdadeiro	Carimbo de data/hora, válido por 5 minutos.


Parâmetros da solicitação:

Nome do parâmetro	Tipo	Mandatório	Descrição
token de atualização	corda	Verdadeiro	Use o update_token para gerar um novo access_token. Cada refresh_token é válido por 30 dias e só pode ser usado uma vez pelo shop_id ou comerciante_id.
ID do parceiro	int	Verdadeiro	O Partner_id obtido do app. Esse parceiro_id foi inserido no corpo da solicitação.
id_da_loja	int	
Verdade, insiraapenas 1	O shop_id da conta principal que concede autorização ao seu APP. Apenas o shop_id ou Merchant_id pode ser selecionado como parâmetro e deve ser atualizado separadamente.
id_do_comerciante	int	O Merchant_id de identificação da conta principal que concedeu autorização ao APP. Apenas o shop_id ou Merchant_id pode ser selecionado como parâmetro e deve ser atualizado separadamente.


Parâmetros de resposta:

Nome do parâmetro	Tipo	Descrição
ID da solicitação	corda	ID das solicitações da API; sempre devolvida.Usado para diagnosticar problemas.
erro	corda	Códigos de erro em transações da API; sempre devolvidas.Quando uma chamada é bem-sucedida, o código de erro é devolvido em branco.
token de atualização	corda	Novo refresh_token.Retornado quando a chamada da API é bem-sucedida.Use o refresh_token para obter um novo access_token.Cada refresh_token é válido por 30 dias e só pode ser usado uma vez por um shop_id ou Merchant_id.
token de acesso	corda	Retornado quando a chamada da API é bem-sucedida.Um código sonoro que pode ser usado diversas vezes e expira em 4 horas.
expirar_em	int	Retornado quando a chamada da API é bem-sucedida.O período de validade do access_token, em segundos.
mensagem	corda	Sempre retornado. Tem informações fornecidas de erros.
id_do_comerciante	int	Retornado quando a chamada é bem-sucedida.O Merchant_id para esse update, para identificar cada vendedor.
id_da_loja	int	Retornado quando a chamada é bem-sucedida.O shop_id que foi utilizado para ser atualizado.
ID do parceiro	int	Retornado quando a chamada é bem-sucedida.O Partner_id que foi utilizado para atualização.
⚠️ Notas
Depois que um novo access_token for gerado, o token antigo ainda é válido por 5 minutos.
Uma reautorização irá acionar uma atualização do refresh_token e do access_token.
Você deve fazer uma chamada ao endpoint RefreshAccessToken dentro do período de validade da autorização.
Se você não salvou o novo refresh_token e o access_token reembolsos, veja soluções possíveis.


Demonstração de código Python:

Pitão
# refresh token


def get_access_token_shop_level(shop_id, partner_id, tmp_partner_key, refresh_token):
    timest = int(time.time())
    host = "https://partner.test.shopeemobile.com"
    path = "/api/v2/auth/access_token/get"
    body = {"shop_id": shop_id, "refresh_token": refresh_token,"partner_id":partner_id}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)
    # print(url)
    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token


def get_access_token_merchant_level(merchant_id, partner_id, tmp_partner_key, refresh_token):
    timest = int(time.time())
    host = "https://partner.test.shopeemobile.com"
    path = "/api/v2/auth/access_token/get"
    body = {"merchant_id": merchant_id, "refresh_token": refresh_token}
    tmp_base_string = "%s%s%s" % (partner_id, path, timest)
    base_string = tmp_base_string.encode()
    partner_key = tmp_partner_key.encode()
    sign = hmac.new(partner_key, base_string, hashlib.sha256).hexdigest()
    url = host + path + "?partner_id=%s&timestamp=%s&sign=%s" % (partner_id, timest, sign)

    headers = {"Content-Type": "application/json"}
    resp = requests.post(url, json=body, headers=headers)
    ret = json.loads(resp.content)
    access_token = ret.get("access_token")
    new_refresh_token = ret.get("refresh_token")
    return access_token, new_refresh_token

partner_id = 2006566
partner_key = "1a78dde5d6c3342f56ac939cbdd81607654c0e87725e118736ba5e3ae31c579c"
shop_id = 602226924
main_account_id = 31219
merchant_id = 45719
code = "c01204cada7b4cd0e4688154f5a256ca"
print(shop_auth())
# access_token,refresh_token = get_token_shop_level(code,partner_id,partner_key,602226924)
# print(access_token)
# print(refresh_token)
# print(get_access_token_shop_level(shop_id,partner_id,partner_key,refresh_token))


access_token,refresh_token = get_token_account_level(code,partner_id,partner_key,main_account_id)
print(access_token)
print(refresh_token)
print(get_access_token_merchant_level(merchant_id,partner_id,partner_key,refresh_token))
   


Demonstração do código Java :

Java

    //shop refresh the access token
    public static String[] get_access_token_shop_level(String refresh_token,long partner_id,String tmp_partner_key,long shop_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/auth/access_token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("refresh_token",refresh_token);
            map.put("shop_id",shop_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }

    //merchant refresh the access token
    public static String[] get_access_token_merchant_level(String refresh_token,long partner_id,String tmp_partner_key,long merchant_id) throws ParseException,IOException{
        String[] res = new String[2];
        long timest = System.currentTimeMillis() / 1000L;
        String host = "https://partner.shopeemobile.com";
        String path = "/api/v2/auth/access_token/get";
        String tmp_base_string = String.format("%s%s%s", partner_id, path, timest);
        byte[] partner_key;
        byte[] base_string;
        BigInteger sign = null;
        String result = "";
        try {
            base_string = tmp_base_string.getBytes("UTF-8");
            partner_key = tmp_partner_key.getBytes("UTF-8");
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(partner_key, "HmacSHA256");
            mac.init(secret_key);
            sign = new BigInteger(1,mac.doFinal(base_string));
        } catch (Exception e) {
            e.printStackTrace();
        }
        String tmp_url = host + path + String.format("?partner_id=%s&timestamp=%s&sign=%s", partner_id,timest, String.format("%032x",sign));
        URL url = new URL(tmp_url);
        HttpURLConnection conn = null;
        PrintWriter out = null;
        BufferedReader in = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(10000);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            Map<String,Object> map = new HashMap<>();
            map.put("refresh_token",refresh_token);
            map.put("merchant_id",merchant_id);
            map.put("partner_id",partner_id);
            String json = JSON.toJSONString(map);
            conn.connect();
            out = new PrintWriter(conn.getOutputStream());
            out.print(json);
            out.flush();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            while((line=in.readLine())!=null){
                result +=line;
            }
            JSONObject jsonObject = JSONObject.parseObject(result);
            res[0] = (String) jsonObject.get("access_token");
            res[1] = (String) jsonObject.get("refresh_token");
        } catch(Exception e){
            e.printStackTrace();
        }finally {
            try{
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
            }catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
        return res;
    }
}


Demonstração de código PHP:

PHP
<?php 

function getAccessTokenShopLevel($partnerId, $partnerKey, $shopId, $refreshToken) {
    global $host;
    $path = "/api/v2/auth/access_token/get";
    
    $timest = time();
    $body = array("partner_id" => $partnerId, "shop_id" => $shopId, "refresh_token" => $refreshToken);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);


    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);

    $result = curl_exec($c);
    echo "\nraw result ".$result."\n";

    $ret = json_decode($result, true);

    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: ".$accessToken.", refresh_token: ".$newRefreshToken."\n";
    return $ret;
}

function getAccessTokenMerchantLevel($partnerId, $partnerKey, $merchantId, $refreshToken) {
    global $host;
    $path = "/api/v2/auth/access_token/get";
    
    $timest = time();
    $body = array("partner_id" => $partnerId, "merchant_id" => $merchantId, "refresh_token" => $refreshToken);
    $baseString = sprintf("%s%s%s", $partnerId, $path, $timest);
    $sign = hash_hmac('sha256', $baseString, $partnerKey);
    $url = sprintf("%s%s?partner_id=%s&timestamp=%s&sign=%s", $host, $path, $partnerId, $timest, $sign);


    $c = curl_init($url);
    curl_setopt($c, CURLOPT_POST, 1);
    curl_setopt($c, CURLOPT_POSTFIELDS, json_encode($body));
    curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($c);
    echo "\nraw result ".$result."\n";

    $ret = json_decode($result, true);
    $accessToken = $ret["access_token"];
    $newRefreshToken = $ret["refresh_token"];
    echo "\naccess_token: ".$accessToken.", refresh_token: ".$newRefreshToken."\n";
    return $ret;
}

$host="https://partner.shopeemobile.com";

$partnerId = 847892;
$partnerKey = "57615053704d6470644f554a78656d50484143644964436a5568777544524579";




// $shopId=200520705;
// $shopRefreshToken="71724c4e68746b546965424c70617244";
// getAccessTokenShopLevel($partnerId, $partnerKey, $shopId, $shopRefreshToken)

$merchantId=1018829;
$merchantRefreshToken="546e5064627042696756455277774f53";
getAccessTokenMerchantLevel($partnerId, $partnerKey, $merchantId, $merchantRefreshToken)

?>
Atualizando o access_token e update_token de uma loja


1. Use o código e o shop_id da URL para fazer a chamada ao endpoint GetAccessToken e obter o primeiro par de access_token e o refresh_token.

URL de redirecionamento: https://open.shopee.com/?code=7867624d4e76616648544f6e52625557&shop_id=54804)



Solicitação: https://partner.shopeemobile.com/api/v2/auth/token/get?partner_id=1000016×tamp=1657263479&sign=9c685bc7e4a74e90f45fe1933f1d72b2d9705acda4093a9fb1ec7e2b57ccea2a



{"shop_id":54804,

"código":"7867624d4e76616648544f6e52625557",

"id_do_parceiro":1000016

}



2. Salve o primeiro par de access_token e refresh_token retornados .

{

  "token de atualização": "456e416149664b76745a6a794156794a",

  "access_token": "6a55746e61546f707579627656637464",

  "expire_in": 13859,

  "id_da_solicitação": "c040b886cfcabdfa5a23af51c595cd1b",

  "erro": "",

  "mensagem": ""

}



3. Faça uma chamada ao endpoint RefreshAccessToken para atualizar o access_token e o refresh_token.

Solicitação: https://partner.shopeemobile.com/api/v2/auth/access_token/get?partner_id=1000016×tamp=1657263479&sign=9c685bc7e4a74e90f45fe1933f1d72b2d9705acda4093a9fb1ec7e2b57ccea2a



{"shop_id":54804,

"token de atualização":"456e416149664b76745a6a794156794a",

"id_do_parceiro":1000016

}



4. Salve os novos access_token e refresh_token.

{

  "id_do_parceiro": 1000016,

  "token de atualização": "666478546b6c63464867685554477a57",

  "token de acesso": "7a5970754768697552654a466f425573",

  "expire_in": 14400,

  "id_da_solicitação": "6d79dd0ffe4e070e185c71ca5153cd51",

  "erro": "",

  "mensagem": "",

  "id_da_loja": 54804

}

Atualizando o access_token e o refresh_token de uma conta principal


1. Use o código e o shop_id da URL para fazer a chamada ao endpoint GetAccessToken e obter o primeiro par de access_token e refresh_token.

URL de redirecionamento: https://open.shopee.com/?code=644d4e48787873706c5a444c776d4b59&main_account_id=10208

Solicitação : https://partner.shopeemobile.com/api/v2/auth/token/get?partner_id=1000016×tamp=1657263479&sign=9c685bc7e4a74e90f45fe1933f1d72b2d9705acda4093a9fb1ec7e2b57ccea2a

{"id_da_conta_principal":10208,

"código":"644d4e48787873706c5a444c776d4b59",

"id_do_parceiro":1000016

}



2. Salve o primeiro par de access_token e refresh_token retornados.

{

  "token de atualização": "684d42685667777868597a4477587455",

  "access_token": "44776151594778486943647644745361",

  "expire_in": 14344,

  "id_da_solicitação": "9199e13ee74b22411498209cb5516e24",

  "lista_de_id_do_comerciante": [

      1001705

  ],

  "lista_de_id_da_loja": [

      33142,

      46154

  ],

  "erro": "",

  "mensagem": ""

}



3. Faça uma chamada ao endpoint RefreshAccessToken API para atualizar o access_token e o refresh_token do shop_id e do comerciante_id, respectivamente

Solicitação: https://partner.shopeemobile.com/api/v2/auth/access_token/get?partner_id=1000016×tamp=1657868745&sign=b78833ddcf533903cfae818bbfcf2b6b630e3bc0c941dd65453632f63bf7b495

{"shop_id":33142,

"token de atualização":"684d42685667777868597a4477587455",

"id_do_parceiro":1000016

}



Solicitação: https://partner.shopeemobile.com/api/v2/auth/access_token/get?partner_id=1000016×tamp=1657868745&sign=b78833ddcf533903cfae818bbfcf2b6b630e3bc0c941dd65453632f63bf7b495

{"id_do_comerciante":1001705,

"token de atualização":"684d42685667777868597a4477587455",

"id_do_parceiro":1000016

}



4. Salve os novosaccess_token e update_token.

{

  "id_do_parceiro": 1000016,

  "token de atualização": "417472546e73504949676279576c477a",

  "access_token": "646d474965714a696177764963775743",

  "expire_in": 14400,

  "id_da_solicitação": "78e64d11cb6dec6f6669282839fca916",

  "erro": "",

  "mensagem": "",

  "id_da_loja": 33142

}

{

  "id_do_parceiro": 1000016,

  "token de atualização": "715075736d6c6570544364774f437369",

  "token de acesso": "69634c664a7350696c6b466d5a53714a",

  "expire_in": 14400,

  "id_da_solicitação": "51eacbc81bd6fa8fddddf1e0ef2dee16",

  "erro": "",

  "mensagem": "",

  "id_do_comerciante": 1001705

}



Seguindo os passos acima, você pode realizar uma chamada ao endpoint RefreshAccessToken em 4 horas para ter o seu novo access_token e refresh_token. Mantenha o ciclo de chamadas para garantir que você continue recebendo novos tokens dentro do período de autorização.

⚠️ NotaSe você não salvou o novo refresh_token e o access_token retornados, veja soluções possíveis .
Cancelando autorização


Você pode cancelar uma solicitação de alteração de URL ou pela Central do Vendedor.

Cancelando a autorização através da alteração da URL de autorização


Siga os mesmos passos para gerar uma URL de autorização, mas substituir a URL fixa por essas URLs de cancelamento de autorização:

Ambiente de produção :
https://partner.shopeemobile.com/api/v2/shop/cancel_auth_partner?partner_id=10090&redirect=https://open.shopee.com×tamp=1594897040&sign=90c12d3932f3826f0c72242e1ec6492eec9a1298658f41f7a9469664801c4e5a


Ambiente de teste/Sandbox :
https://partner.test-stable.shopeemobile.com/api/v2/shop/cancel_auth_partner?partner_id=1000016&redirect=https://open.shopee.com×tamp=1657254106&sign=47e8712bb89dbc7c7f71eb690310d089b951801cb104763981de5b3dacc3f07c


Faça login na sua conta.


Selecione Cancelar autorização .


Cancelando a autorização através da Central do Vendedor


Na Central do Vendedor em "Configuração > Integradora/ERPs" , os fornecedores podem ver quais aplicativos a loja autorizou e as datas de expiração das respectivas autorizações. O vendedor também pode cancelar uma autorização diretamente selecionando desvincular na coluna de ações.


Perguntas frequentes sobre autorização e autenticação